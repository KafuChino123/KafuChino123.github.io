<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>详细图解哈夫曼Huffman编码树</title>
    <url>/2024/03/06/CPT102-L2-Huffman/</url>
    <content><![CDATA[<p>#数据结构 #CPT102</p>
<p>本文章转载自CSDN，是一篇详细的、通俗易懂的图解，很便于我们理解哈夫曼Huffman编码树～<br><a href="http://blog.csdn.net/fx677588/article/details/70767446">&lt;网站链接&gt;</a><br>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议。</p>
<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><strong>哈夫曼（Huffman）编码算法</strong> 是基于二叉树构建编码压缩结构的，它是数据压缩中经典的一种算法。算法根据文本字符出现的频率，重新对字符进行编码。因为为了缩短编码的长度，我们自然希望频率越高的词，编码越短，这样最终才能最大化压缩存储文本数据的空间。</p>
<p>假设现在我们要对下面这句歌词“we will we will r u”进行压缩。我们可以想象，如果是使用ASCII码对这句话编码结果则为：119 101 32 119 105 108 108 32 119 101 32 119 105 108 108 32 114 32 117（十进制表示）。我们可以看出需要19个字节，也就是至少需要152位的内存空间去存储这些数据。<br>　　<br>很显然直接ASCII码编码是很浪费空间的，Unicode就更不用说了，下面我们先来统计一下这句话中每个字符出现的频率。如下表，按频率高低已排序：</p>
<p><img src="/pictures/CPT102-L2-Huffman/1.jpeg" alt="1" title="1" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="哈夫曼二叉树构建"><a href="#哈夫曼二叉树构建" class="headerlink" title="哈夫曼二叉树构建"></a>哈夫曼二叉树构建</h2><h3 id="初始队列"><a href="#初始队列" class="headerlink" title="初始队列"></a>初始队列</h3><p>那么我们按出现频率高低将其放入一个优先级队列中，从左到右依次为频率逐渐增加。</p>
<p><img src="/pictures/CPT102-L2-Huffman/2.1.jpeg" alt="2.1" title="2.1" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>下面我们需要将这个队列转换成哈夫曼二叉树，哈夫曼二叉树是一颗带权重的二叉树，权重是由队列中每个字符出现的次数所决定的。并且哈夫曼二叉树始终保证权重越大的字符出现在越高的地方。</p>
<h3 id="第一步合并"><a href="#第一步合并" class="headerlink" title="第一步合并"></a>第一步合并</h3><p>首先我们从左到右进行合并，依次构建二叉树。第一步取前两个字符u和r来构造初始二叉树，第一个字符作为左节点，第二个元素作为右节点，然后两个元素相加作为新空元素，并且两者权重相加作为新元素的权重。</p>
<p><img src="/pictures/CPT102-L2-Huffman/2.2.1.jpeg" alt="2.2.1" title="2.2.1" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>同理，新元素可以和字符i再合并，如下：</p>
<p><img src="/pictures/CPT102-L2-Huffman/2.2.2.jpeg" alt="2.2.2" title="2.2.2" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="重新调整队列"><a href="#重新调整队列" class="headerlink" title="重新调整队列"></a>重新调整队列</h3><p>上图新元素权重相加后结果是变大了，需要对权重进行重新排序。</p>
<p><img src="/pictures/CPT102-L2-Huffman/2.3.1.jpeg" alt="2.3.1" title="2.3.1" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>然后再依次从左到右合并，每合并一次则进行一次队列重新排序调整。如下：</p>
<p><img src="/pictures/CPT102-L2-Huffman/2.3.2.jpeg" alt="2.3.2" title="2.3.2" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>经过多步操作之后，得到以下的哈夫曼二叉树结构，也就是一个带有权重的二叉树：</p>
<p><img src="/pictures/CPT102-L2-Huffman/2.3.3.jpeg" alt="2.3.3" title="2.3.3" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="哈夫曼编码"><a href="#哈夫曼编码" class="headerlink" title="哈夫曼编码"></a>哈夫曼编码</h3><p>有了上面带权重的二叉树之后，我们就可以进行编码了。我们把二叉树分支中左边的支路编码为0，右边分支表示为1，如下图：</p>
<p><img src="/pictures/CPT102-L2-Huffman/2.4.1.jpeg" alt="2.4.1" title="2.4.1" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>这样依次遍历这颗二叉树就可以获取得到所有字符的编码了。例如：‘ ’的编码为10，‘l’的编码为00，‘u’的编码为11100等等。经过这个编码设置之后我们可以发现，出现频率越高的字符越会在上层，这样它的编码越短；出现频率越低的字符越会在下层，编码越短。经过这样的设计，最终整个文本存储空间才会最大化的缩减。</p>
<p>最终我们可以得到下面这张编码表：</p>
<p><img src="/pictures/CPT102-L2-Huffman/2.4.2.jpeg" alt="2.4.2" title="2.4.2" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="字符串编码"><a href="#字符串编码" class="headerlink" title="字符串编码"></a>字符串编码</h3><p>有了上面的编码表之后，”we will we will r u”这句重新进行编码就可以得到很大的压缩，编码表示为：01 110 10 01 1111 00 00 10 01 110 10 01 1111 00 00 10 11101 10 11100。这样最终我们只需50位内存，比原ASCII码表示节约了2&#x2F;3空间，效果还是很理想的。当然现实中不是简单这样表示的，还需要考虑很多问题。</p>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>我们需要弄明白哈夫曼二叉树概念，它是带权路径达到最小的二叉树，也叫最优二叉树。它不一定是完全二叉树，也不一定是平衡二叉树，它们描述的完全不是一件事情，完全没有概念上的重叠关系。</p>
<hr>
<p>如有错误，请及时指出～评论发邮件均可，欧内盖！</p>
]]></content>
      <categories>
        <category>XJTLU</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>CPT102</tag>
      </tags>
  </entry>
  <entry>
    <title>CPT103-L1-Introduction</title>
    <url>/2024/02/27/CPT103-L1/</url>
    <content><![CDATA[<p>#CPT103 #Database<br>这节是CPT103这个学期的第一节课，主要是数据库整体的概念，应用和一些基本的术语(Terminologies)。我看了一下那些术语，好多感觉还不太好记，所以就在这里简单总结一下。<br>*中文对应名词及相关解释参考了维基百科，以及Google Gemini给出的部分解答。</p>
<h2 id="Basic-Terminologies"><a href="#Basic-Terminologies" class="headerlink" title="Basic Terminologies"></a>Basic Terminologies</h2><p><strong>relation(关系)</strong>: 简单理解就是一个有行有列的表格，更准确地说是关系数据库(relational database)中的一系列元组(tuple)的集合。</p>
<p><strong>attribute(特性)</strong>: 一个纵列。许多非关系型数据库或多值数据库系统中，列对应于特性。</p>
<p><strong>domain(域)</strong>: 一组具有相同数据类型和约束的属性值的集合。</p>
<p><img src="/pictures/CPT103-L1/attribute.jpg" alt="关系特性域" title="关系特性域" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><strong>Tuple(元组)</strong>: 关系中的一行数据，也称为记录(record)。</p>
<p><strong>The degree of a relation(关系的度)</strong>: 指关系中特性的个数。例如，一个关系包含姓名、年龄、性别三个特性，那么该关系的度为3。</p>
<p><strong>Cardinality(基数)</strong>: 指数据库中某个表的某个列中不重复行的总个数。</p>
<p>以下名词可以互相替换：<br><img src="/pictures/CPT103-L1/alternativeTerminologies.png" alt="alternativeTerminologies" title="alternativeTerminologies" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="Relation-Keys"><a href="#Relation-Keys" class="headerlink" title="Relation Keys"></a>Relation Keys</h2><p><strong>Superkey(超键)</strong>: 关系中能唯一标识元组的属性集合。换句话说，超键是能够确定关系中每个元组的唯一性的属性集合。</p>
<p><strong>Candidate key(候选键)</strong>: 关系中能够唯一标识元组的属性集合，但是要满足：候选键中的属性(特性)不能有任何冗余。</p>
<p><strong>Primary key(主键)</strong>: 关系中用于唯一标识每个元组的属性或属性组，但是有以下特点：①主键中的值必须唯一，不能重复；②主键不能包含空值；③主键的值不能被修改；④ 一个关系中只能有一个主键。</p>
<p><strong>Alternate key(替代键)</strong>: 指除了主键之外的，能够唯一标识关系中每个元组的属性或属性组。同样要求：①替代键中值唯一；②不能包含空值。</p>
<p><strong>composite key(复合键)</strong>: 由多个列（字段）组成的键。这些列结合在一起形成一个唯一的索引，用于唯一标识数据库中的每个记录。</p>
<p>*这些键有包含关系，均属于超键，所以超键的特点其他键也都具有：<br><img src="/pictures/CPT103-L1/relationKeys.png" alt="relationKeys" title="relationKeys" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><strong>foreign key(外键)</strong>: 引用另一个表中的主键（primary key）的列。外键用于建立表之间的关系，并确保数据的完整性和一致性。</p>
<hr>
<p>如有错误，请及时指出～评论发邮件均可，欧内盖！</p>
]]></content>
      <categories>
        <category>XJTLU</category>
      </categories>
      <tags>
        <tag>CPT103</tag>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>CPT103-L2-SQL</title>
    <url>/2024/03/05/CPT103-L2/</url>
    <content><![CDATA[<p>#CPT103 #Database</p>
<p>CPT103 Lecture的第二节课，主要讲了<strong>SQL(Structured Query Language)<strong>、</strong>一些基本的创建表格的语法</strong>和<strong>一些元组(Tuple)的操作</strong>。</p>
<ul>
<li>推荐一个网站：<a href="https://www.sjkjc.com/mysql/">网站链接</a>，系统介绍讲解了数据库，可以参考。</li>
</ul>
<h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><p>SQL(Structured Query Language, 结构化查询语言)，是一种特定目的编程语言，用于管理关系数据库管理系统(RDBMS)，或在关系流数据管理系统(RDSMS)中进行流处理。</p>
<p><strong>SQL有三个重要的部分</strong>：</p>
<ul>
<li>数据定义语言(Data Definition Language, DDL):<br>用于定义和管理数据库对象，包括数据库、表、索引、视图、存储过程、触发器等。DDL语句用于定义和修改数据库对象的结构，不会直接对数据库中的数据进行操作。<br>DDL语句常用的关键字包括：</li>
</ul>
<p><code>CREATE</code>：用于创建数据库对象，例如表、索引、视图等。<br><code>ALTER</code>：用于修改数据库对象的结构，例如添加或删除列、修改列的数据类型等。<br><code>DROP</code>：用于删除数据库对象。</p>
<ul>
<li>数据操纵语言(Data Manipulation Language, DML):<br>是SQL语言的一个子集，用于对数据库中的数据进行操作，包括插入、更新、删除和检索数据。DML语句用于对数据库中的数据进行增删改查，不会直接对数据库对象的结构进行操作。<br>DML语句常用的关键字包括：</li>
</ul>
<p><code>INSERT</code>：用于插入一条或多条数据到数据库中。<br><code>UPDATE</code>：用于更新数据库中的数据。<br><code>DELETE</code>：用于删除数据库中的数据。<br><code>SELECT</code>：用于从数据库中检索数据。</p>
<ul>
<li>数据控制语言(Data Control Language, DCL):<br>是 SQL 语言的一个子集，用于控制数据库用户对数据库对象的访问权限。DCL 语句不会直接对数据库中的数据或结构进行操作，而是用于授予或收回用户对数据库对象的权限。<br>DCL 语句常用的关键字包括：</li>
</ul>
<p><code>GRANT</code>：用于授予用户对数据库对象的权限。<br><code>REVOKE</code>：用于收回用户对数据库对象的权限。</p>
<h2 id="SQL的格式"><a href="#SQL的格式" class="headerlink" title="SQL的格式"></a>SQL的格式</h2><ul>
<li>需要注意的是，SQL语言对关键字的大小写并不敏感，原则上大写小写都没问题，但一般为了更好的可读性和代码的整洁规范，我们选择<strong>关键字全部大写</strong>；</li>
<li>而表格的名字、列的名字往往是大小写敏感的，所以我们选择这么写：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> (sName) <span class="keyword">FROM</span> Student;</span><br></pre></td></tr></table></figure>

<h2 id="创建一个逻辑结构-Schema"><a href="#创建一个逻辑结构-Schema" class="headerlink" title="创建一个逻辑结构(Schema)"></a>创建一个逻辑结构(Schema)</h2><p>可以：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> SCHEMA name;</span><br></pre></td></tr></table></figure>

<p>或者：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE name;</span><br></pre></td></tr></table></figure>

<p>Schema 指的是数据库对象的逻辑结构，包括表、视图、索引、存储过程、触发器等。它定义了数据库中数据的组织方式，以及数据库对象之间的关系。</p>
<h2 id="创建我们的第一个表格"><a href="#创建我们的第一个表格" class="headerlink" title="创建我们的第一个表格"></a>创建我们的第一个表格</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> my_table ( </span><br><span class="line">    column1 <span class="type">int</span>, </span><br><span class="line">    column2 <span class="type">varchar</span>(<span class="number">40</span>) </span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="SQL语法"><a href="#SQL语法" class="headerlink" title="SQL语法"></a>SQL语法</h2><h3 id="‘USE’关键字"><a href="#‘USE’关键字" class="headerlink" title="‘USE’关键字"></a>‘USE’关键字</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE schema_name;</span><br></pre></td></tr></table></figure>

<p>USE关键字用于选择要使用的数据库，通常在连接到数据库服务器后立即使用，以便后续的查询和操作都针对该数据库进行。如果不使用USE关键字，则默认情况下使用当前连接的数据库。</p>
<h3 id="Inserting-Values-插入值"><a href="#Inserting-Values-插入值" class="headerlink" title="Inserting Values(插入值)"></a>Inserting Values(插入值)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> my_table <span class="keyword">VALUES</span>  (<span class="number">1</span>, <span class="string">&#x27;ABC&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;DEF&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>INSERT关键字用于向表中插入新记录。它是一种非常常用的SQL语句，可以用于将数据导入数据库中。<br>tips: <code>(1, &#39;ABC&#39;)</code>, <code>(2, &#39;DEF&#39;)</code>就是该table的两个元组(Tuple)。</p>
<p>此外，还可以使用**反引号(&#96;)**，这样表格或列名字命名时如果有空格，就不需要使用’_’，直接空格即可：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `my <span class="keyword">table</span>` (</span><br><span class="line">    `<span class="keyword">column</span> A` <span class="type">INT</span>,</span><br><span class="line">    `<span class="keyword">column</span> B` <span class="type">VARCHAR</span>(<span class="number">11</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>但是非常不建议这么做！正常我们就用上面的普通的命名方式<code>my_table</code>就好。</p>
<h2 id="Numercial-Data-Types-数字的数据类型"><a href="#Numercial-Data-Types-数字的数据类型" class="headerlink" title="Numercial Data Types(数字的数据类型)"></a>Numercial Data Types(数字的数据类型)</h2><h3 id="Integers-整数"><a href="#Integers-整数" class="headerlink" title="Integers(整数)"></a>Integers(整数)</h3><ul>
<li><p>example: <code>INT</code> or <code>INT(5)</code><br> - 括号内表示 integer 的总位数。</p>
</li>
<li><p>SMALLINT<br> - 占用：2字节(byte)<br> - 范围：-32,768 到 32,767，是左闭右开区间，即包括-32,768但不包括32,767。</p>
</li>
<li><p>INT or INTEGER<br> - 占用：4字节<br> - 范围：-2,147,483,648 到 2,147,483,647（无符号：0 到 4,294,967,295，也是左闭右开区间。<br> - 是最经典和常用的选择。（废话</p>
</li>
<li><p>BIGINT<br> - 占用：8字节<br> - 范围：-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807</p>
</li>
</ul>
<h3 id="Fixed-Point-定点数"><a href="#Fixed-Point-定点数" class="headerlink" title="Fixed Point(定点数)"></a>Fixed Point(定点数)</h3><p>这是个全新的东西，细细说一下这个定点数是什么：</p>
<ul>
<li><p>example: <code>DECIMAL[(M[, D])]</code> or <code>NUMERIC[(M[, D])]</code><br>(tips: 中括号[]之间的是optional的，可有可无)<br>M -&gt; 总位数，D -&gt; 小数点后的位数<br>example：<code>price DECIMAL(10,2)</code></p>
</li>
<li><p>定点数是什么？<br> - <strong>定点数（Fixed-point number）</strong>是一种表示实数的格式，其特点是小数点的位置是固定的。</p>
</li>
<li><p>相比于浮点数，定点数的优点：<br> - 精度更高：浮点数的精度会受到指数的影响，而定点数的精度是固定的。<br> - 速度更快：定点数的运算速度比浮点数更快，因为不需要进行指数运算。<br> - 存储空间更小：定点数占用更少的存储空间，因为不需要存储指数。</p>
</li>
<li><p>定点数的缺点：<br> - 表示范围有限：定点数的表示范围由小数点的位置决定，无法表示超出范围的数字。<br> - 不适用于科学计算：定点数不适用于需要很高精度的科学计算。</p>
</li>
<li><p>定点数的表示方法：<br> - 定点数通常使用二进制表示，小数点的位置由整数部分和小数部分的位数决定。例如，一个8位定点数，其中4位整数部分，4位小数部分，可以表示的范围为-2^4到2^4-2^(-4)，精度为1&#x2F;2^(-4)。</p>
</li>
<li><p>常见的应用场景：<br> - 金融计算：定点数用于计算利率、汇率等金融数据。<br> - 嵌入式系统：定点数用于控制电机、温度等设备。<br> - 数字信号处理：定点数用于滤波、傅里叶变换等信号处理操作。</p>
</li>
</ul>
<h3 id="Float-浮点数"><a href="#Float-浮点数" class="headerlink" title="Float(浮点数)"></a>Float(浮点数)</h3><ul>
<li>example: <code>FLOAT</code> or <code>FLOAT(5)</code> or <code>FLOAT(3, 2)</code><br> - 括号内如果只有一个参数，则表示总位数；<br> - 如果有两个参数，则第一个表示总位数，第二个表示小数点后的位数。</li>
</ul>
<h3 id="String-Types-字符串类型"><a href="#String-Types-字符串类型" class="headerlink" title="String Types(字符串类型)"></a>String Types(字符串类型)</h3><ul>
<li><code>CHAR[(M)]</code> or <code>VARCHAR(M)</code><br>M -&gt; 总位数<br>(tips: 中括号[]之间的是optional的，可有可无)</li>
</ul>
<p>二者之间的区别：<br> - <strong>存储方式</strong>:<br><strong>CHAR：</strong>固定长度，以空格填充不足部分。例如，CHAR(10)类型的列，如果存储的字符串长度不足10，则会用空格补足到10个字符。<br><strong>VARCHAR：</strong>可变长度，只存储字符串实际占用的空间。例如，VARCHAR(10)类型的列，如果存储的字符串长度为5，则只占用5个字节的存储空间。</p>
<p> - <strong>性能</strong>:<br><strong>CHAR：</strong>查询效率较高，因为长度固定，可以直接进行比较。<br><strong>VARCHAR：</strong>查询效率略低，因为需要先获取字符串的实际长度，然后进行比较。</p>
<p> - <strong>使用场景</strong>:<br><strong>CHAR：</strong>适用于存储长度固定且需要精确比较的字符串，例如身份证号码、密码等。<br><strong>VARCHAR：</strong>适用于存储长度可变且不需要精确比较的字符串，例如姓名、地址等。</p>
<h3 id="String-Values-字符串值"><a href="#String-Values-字符串值" class="headerlink" title="String Values(字符串值)"></a>String Values(字符串值)</h3><ul>
<li>SQL中，字符串值使用单引号：<code>&#39;I AM A STRING&#39;</code><br>(tips: 用双引号其实也可以，这方面也不严格)</li>
<li>在字符串内部使用单引号时，前面加上反斜杠：<code>&#39;I\&#39;M A STRING&#39;</code><br>或使用双引号：<code>&#39;I&quot;M A STRING&#39;</code></li>
</ul>
<h3 id="Date-and-Time-日期与时间"><a href="#Date-and-Time-日期与时间" class="headerlink" title="Date and Time(日期与时间)"></a>Date and Time(日期与时间)</h3><ul>
<li><p><code>DATE</code>:<br> - 支持的范围：’1000-01-01’ to ‘9999-12-31’.<br> - MySQL展示日期的格式：’YYYY-MM-DD’.</p>
</li>
<li><p><code>DATETIME[(fsp)]</code><br> - 支持的范围：’1000-01-01 00:00:00.000000’ to ‘9999-12-31 23:59:59.999999’.<br> - MySQL展示日期的格式：’YYYY-MM-DD hh:mm:ss[.fraction]’.</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `staff` ( </span><br><span class="line">    `name` <span class="type">VARCHAR</span>(<span class="number">60</span>), </span><br><span class="line">    `id_card` <span class="type">CHAR</span>(<span class="number">6</span>), </span><br><span class="line">    `recruit_date` <span class="type">DATE</span>, </span><br><span class="line">    `last_login` DATETIME </span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li><code>TIMESTAMP</code><br> - 和DATETIME相似，但是保存UTC时间。</li>
</ul>
<h3 id="NULL-and-Special-Values-特殊值"><a href="#NULL-and-Special-Values-特殊值" class="headerlink" title="NULL and Special Values(特殊值)"></a>NULL and Special Values(特殊值)</h3><ul>
<li><p>NULL：<br><code>NULL</code>表示未知或缺失，它不是0、””或任何其他值。NULL可以出现在任何数据类型中，包括数字、字符串、日期等。<br> - 常用于：数据尚未收集；数据无法获得；数据被删除。</p>
</li>
<li><p>Special Values：<br>指具有特殊含义的值。<br>example：<br><code>NaN</code>: 表示非数字<br><code>Infinity</code>: 表示正无穷<br><code>-Infinity</code>: 表示负无穷</p>
</li>
</ul>
<p> - 常用于：表示数据溢出或数据无效等情况。</p>
<h3 id="Column-Options-列选项"><a href="#Column-Options-列选项" class="headerlink" title="Column Options(列选项)"></a>Column Options(列选项)</h3><p><code>col-name datatype [col-options]</code></p>
<ul>
<li><code>NOT NULL</code>: 这个列的值不能为NULL；</li>
<li><code>UNIQUE</code>: 每个值都必须独一无二，不能重复；</li>
<li><code>DEFAULT value</code>: 默认值。（在MS access中不工作）</li>
<li><code>AUTO_INCREMENT</code>: 自动生成唯一数字，通常用于主键——每次向表中插入新记录时，MySQL会自动将AUTO_INCREMENT设置的列的值加1；也可以指定自增起始值，默认值为1。</li>
</ul>
<p>example:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons ( </span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">UNIQUE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT, </span><br><span class="line">    lastname <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, </span><br><span class="line">    firstname <span class="type">VARCHAR</span>(<span class="number">255</span>), </span><br><span class="line">    age <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">12</span>, </span><br><span class="line">    city <span class="type">VARCHAR</span>(<span class="number">255</span>) </span><br><span class="line">) AUTO_INCREMENT <span class="operator">=</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<h2 id="Tuple-Manipulation-元组操作"><a href="#Tuple-Manipulation-元组操作" class="headerlink" title="Tuple Manipulation(元组操作)"></a>Tuple Manipulation(元组操作)</h2><h3 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h3><ul>
<li>添加一横排数据：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tablename (col1, col2, …)</span><br><span class="line"><span class="keyword">VALUES</span> (val1, val2, …), </span><br><span class="line">    ...</span><br><span class="line">    (val1,val2,val3);</span><br></pre></td></tr></table></figure>

<ul>
<li>如果每一列都要添加值，就不用一一列出来了：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tablename <span class="keyword">VALUES</span> (val1, val2, …);</span><br></pre></td></tr></table></figure>

<h3 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h3><ul>
<li>更新一横排数据：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> table_name</span><br><span class="line"><span class="keyword">SET</span> col1 <span class="operator">=</span> val1 [,col2 <span class="operator">=</span> val2…]</span><br><span class="line">[<span class="keyword">WHERE</span> <span class="keyword">condition</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li>关于condition：</li>
</ul>
<p> - condition为true的横排，对应列的值都会改变；<br> - <strong>如果不给condition，所有横排都会被改变</strong>。</p>
<h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><ul>
<li>删除一横排数据：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span></span><br><span class="line">    table_name </span><br><span class="line">    [<span class="keyword">WHERE</span> <span class="keyword">condition</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li>condition同上。</li>
</ul>
<hr>
<p>如有错误，请及时指出～评论发邮件均可，欧内盖！</p>
]]></content>
      <categories>
        <category>XJTLU</category>
      </categories>
      <tags>
        <tag>CPT103</tag>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>INT104-T1-Python</title>
    <url>/2024/02/29/INT104-T1/</url>
    <content><![CDATA[<p>#INT104 #Python</p>
<p>这节课，正式开始了我们本学期的Python学习之旅。Python是一种易于学习的“解释性语言”：不需要预先编译，可以快速开发和测试代码 —— 这也是为什么 Python 文件运行的速度要比 C 为代表的编译型语言快得多的主要原因。</p>
<p>本篇文章总结了 tutorial 1 主要的语法知识点。（因为在这之前相信都有上学期的Java基础，所以以Python的语法特点为重点，对关键字的定义和用途不作过多解释。）<br>（前排提示老师给的notebook上面有这些知识的汇总，看那个也行）</p>
<h3 id="Variable-变量"><a href="#Variable-变量" class="headerlink" title="Variable (变量)"></a>Variable (变量)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">3</span></span><br><span class="line">y = <span class="number">4</span></span><br><span class="line">z = x * y</span><br><span class="line">answer = <span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(answer)</span><br></pre></td></tr></table></figure>

<h3 id="Types-类型"><a href="#Types-类型" class="headerlink" title="Types (类型)"></a>Types (类型)</h3><p><img src="/pictures/INT104-T1/types.png" alt="types" title="types" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="Casting-types-强制转换"><a href="#Casting-types-强制转换" class="headerlink" title="Casting types (强制转换)"></a>Casting types (强制转换)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">10</span>     <span class="comment"># This is an integer</span></span><br><span class="line">y = <span class="string">&quot;20&quot;</span>   <span class="comment"># This is a string</span></span><br><span class="line">z= x + <span class="built_in">int</span>(y)</span><br></pre></td></tr></table></figure>

<h3 id="Strings-字符串"><a href="#Strings-字符串" class="headerlink" title="Strings (字符串)"></a>Strings (字符串)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="string">&quot;This can be&quot;</span></span><br><span class="line">y = <span class="string">&quot;repeated &quot;</span></span><br><span class="line">z = x + <span class="string">&quot; &quot;</span> + y * <span class="number">3</span></span><br><span class="line">x = x.upper() <span class="comment">#字符串内容大写</span></span><br><span class="line">x = x.lower() <span class="comment">#字符串内容小写</span></span><br></pre></td></tr></table></figure>

<h3 id="Multiline-strings-多行字符串"><a href="#Multiline-strings-多行字符串" class="headerlink" title="Multiline strings (多行字符串)"></a>Multiline strings (多行字符串)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="string">&quot;&quot;&quot; To include</span></span><br><span class="line"><span class="string">multiple lines</span></span><br><span class="line"><span class="string">you have to do this&quot;&quot;&quot;</span></span><br><span class="line">y = <span class="string">&quot; or you can\ninclude the special\n character`\\n`between lines&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="Lists-列表"><a href="#Lists-列表" class="headerlink" title="Lists (列表)"></a>Lists (列表)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># a list of strings</span></span><br><span class="line">fruits = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;tomato&quot;</span>, <span class="string">&quot;banana&quot;</span>] </span><br><span class="line">fruits[<span class="number">2</span>]    <span class="comment"># indexing a list</span></span><br><span class="line"><span class="built_in">len</span>(fruits)  <span class="comment"># the length of a list</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a list with integers</span></span><br><span class="line"><span class="comment"># Syntax : range(start point, end point, step size)</span></span><br><span class="line">nums = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">0</span>, <span class="number">30</span>, <span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(nums) <span class="comment"># -&gt; [0, 5, 10, 15, 20, 25] The end point is not included</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Slicing lists</span></span><br><span class="line"><span class="comment"># Syntax: List[start point : end point : step size ]</span></span><br><span class="line">nums2 = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">0</span>, <span class="number">100</span>, <span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(nums)</span><br><span class="line"><span class="built_in">print</span>(nums2[<span class="number">1</span>:<span class="number">5</span>:<span class="number">2</span>])  <span class="comment"># get from item 1(starting point) through item 5(end point, not included) with step size 2</span></span><br><span class="line"><span class="built_in">print</span>(nums2[<span class="number">0</span>:<span class="number">3</span>])    <span class="comment"># get items 0 through 3</span></span><br><span class="line"><span class="built_in">print</span>(nums2[<span class="number">4</span>:])     <span class="comment"># get items 4 onwards</span></span><br><span class="line"><span class="built_in">print</span>(nums2[-<span class="number">1</span>])     <span class="comment"># get the last item</span></span><br><span class="line"><span class="built_in">print</span>(nums2[::-<span class="number">1</span>])   <span class="comment"># get the whole list backwards</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># helpful functions</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(nums))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(nums))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(nums))</span><br><span class="line"></span><br><span class="line"><span class="comment"># lists can be of different types</span></span><br><span class="line">mixed = [<span class="number">3</span>, <span class="string">&quot;Two&quot;</span>, <span class="literal">True</span>, <span class="literal">None</span>]</span><br></pre></td></tr></table></figure>

<h3 id="Tuples-元组"><a href="#Tuples-元组" class="headerlink" title="Tuples(元组)"></a>Tuples(元组)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fruits = (<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;tomato&quot;</span>, <span class="string">&quot;banana&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>那么问题来了，tuples和lists的区别是什么？<br>这里有一些解答：<br><img src="/pictures/INT104-T1/tuplesvslists.png" alt="tuplesvslists" title="tuplesvslists" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="Sets-集合"><a href="#Sets-集合" class="headerlink" title="Sets (集合)"></a>Sets (集合)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = &#123;<span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;       <span class="comment"># a set created directly</span></span><br><span class="line">y = <span class="built_in">set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>])  <span class="comment"># a set created from a list</span></span><br><span class="line">x == y                 <span class="comment"># True, x and y are the same object</span></span><br></pre></td></tr></table></figure>

<h3 id="Dictionaries-字典"><a href="#Dictionaries-字典" class="headerlink" title="Dictionaries (字典)"></a>Dictionaries (字典)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Syntax: name = &#123;key: value&#125;</span></span><br><span class="line">days = &#123;<span class="string">&quot;Monday&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">       <span class="string">&quot;Tuesday&quot;</span>: <span class="string">&quot;2&quot;</span>&#125;</span><br><span class="line">days[<span class="string">&quot;Monday&quot;</span>]  <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line">days.update(&#123;<span class="string">&quot;Saturday&quot;</span>: <span class="string">&quot;6&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">days.pop(<span class="string">&quot;Monday&quot;</span>) <span class="comment"># remove a day</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(days.keys())    <span class="comment"># dict_keys([&#x27;Tuesday&#x27;, &#x27;Saturday&#x27;])</span></span><br><span class="line"><span class="built_in">print</span>(days.values())  <span class="comment"># dict_values([&#x27;2&#x27;, &#x27;6&#x27;])</span></span><br></pre></td></tr></table></figure>

<hr>
<p>如有错误，请及时指出～评论发邮件均可，欧内盖！</p>
]]></content>
      <categories>
        <category>XJTLU</category>
      </categories>
      <tags>
        <tag>INT104</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>计网Chapter1-计算机网络概述</title>
    <url>/2024/10/25/ComNet-C1/</url>
    <content><![CDATA[<p>#计算机网络 #XJTLU</p>
<p>中科大郑烇、杨坚《计算机网络（自顶向下方法 第7版，James F.Kurose，Keith W.Ross）》课程</p>
<p>计算机网络系列笔记根据B站课程 <a href="https://space.bilibili.com/410739029">@中科大-郑烇老师</a> 的课程总结而来，供自学以及分享使用。<br><a href="https://www.bilibili.com/video/BV1JV411t7ow?spm_id_from=333.788.videopod.episodes&vd_source=bda40cfe75d1533c45205d7bec39503b">&lt;课程链接&gt;</a></p>
<p>第一章 计算机网络概述</p>
<h2 id="什么是网络？"><a href="#什么是网络？" class="headerlink" title="什么是网络？"></a>什么是网络？</h2><ul>
<li>把端系统和交换节点连接在一起叫接入网，交换节点和交互节点叫网络核心。</li>
<li>端系统 &#x3D; 主机，主要包括能进行网络通信的网络应用和操作系统。</li>
<li>计算机网络包括应用进程和其下的协议基础设施。</li>
<li>以tcp&#x2F;ip协议为主的协议簇为基础的网络叫计算机网络。</li>
<li>协议：对等实体进行数据交换所需遵守的一系列规则。</li>
<li>协议包括：语法，语义，次序，动作。</li>
<li>服务分为面向连接的服务（tcp）和无连接的服务 （udp）。</li>
</ul>
<h2 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h2><ul>
<li>互联网络结构：网络的网络</li>
</ul>
<p><img src="/pictures/ComNet-C1/%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84.png" alt="网络结构" title="网络结构" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="网络边缘"><a href="#网络边缘" class="headerlink" title="网络边缘"></a>网络边缘</h2><ul>
<li><strong>网络边缘</strong>：主机和应用程序（服务器）</li>
<li>服务模式：&#96;c&#x2F;s模式（主机（从）、服务器（主）），P2p模式（每个主机可能是主机又可能是服务器）</li>
<li><strong>tcp（传输控制协议，Transform Control Proctol）</strong>：可靠的数据传输（流量管理和拥塞控制）；</li>
<li><strong>udp（用户数据报协议，User Datagram Protctol）</strong>：不可靠的数据传输，但是速度快。</li>
</ul>
<p><img src="/pictures/ComNet-C1/%E7%BD%91%E7%BB%9C%E8%BE%B9%E7%BC%981.png" alt="网络边缘1" title="网络边缘1" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br><img src="/pictures/ComNet-C1/%E7%BD%91%E7%BB%9C%E8%BE%B9%E7%BC%982.png" alt="网络边缘2" title="网络边缘2" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br><img src="/pictures/ComNet-C1/%E7%BD%91%E7%BB%9C%E8%BE%B9%E7%BC%983.png" alt="网络边缘3" title="网络边缘3" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="网络核心"><a href="#网络核心" class="headerlink" title="网络核心"></a>网络核心</h2><ul>
<li><strong>网络核心</strong>：是由路由器组成的网状网络，起到数据交换的作用。</li>
<li>传播延时：信息在物理媒介中的延时</li>
<li>电路交换&#x2F;分组交换：（可参考上文湖科大部分内容）电路交换有独享线路，有性能保障，但是信息共享程度能力较低，连接建立时间非常长，而网络连接的建立具有很强的突发性，所以电路交换不好。分组交换通过将信息分组，等到分组（单个分组不是整个报文）全部传输完成时再进行转发，延时较高，可能丢包，但是利于信道共享；有存储时延和排队时延。</li>
</ul>
<p><img src="/pictures/ComNet-C1/%E7%BD%91%E7%BB%9C%E6%A0%B8%E5%BF%83.png" alt="网络核心" title="网络核心" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ul>
<li>将带宽分片以共享信息频路：频分（fdm），时分（tdm），波分（wdm），码分（cdma）</li>
<li>数据报（无连接）：每个分组携带完整的地址，进行分组转发。</li>
</ul>
<p><img src="/pictures/ComNet-C1/%E6%95%B0%E6%8D%AE%E6%8A%A5.png" alt="数据报" title="数据报" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ul>
<li>虚电路（有连接）：建立一个虚拟电路，每个分组携带一个电路号，进行存储转发。有连接，无连接和面向连接（网络层的连接）没有关系。</li>
</ul>
<p><img src="/pictures/ComNet-C1/%E8%99%9A%E7%94%B5%E8%B7%AF.png" alt="虚电路" title="虚电路" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/pictures/ComNet-C1/%E7%BD%91%E7%BB%9C%E5%88%86%E7%B1%BB.png" alt="网络分类" title="网络分类" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="接入网和传输媒体"><a href="#接入网和传输媒体" class="headerlink" title="接入网和传输媒体"></a>接入网和传输媒体</h2><h3 id="接入网"><a href="#接入网" class="headerlink" title="接入网"></a>接入网</h3><ul>
<li><p>接入网：网络边缘和网络核心的接入</p>
</li>
<li><p>将端系统和边缘路由器连接：住宅接入网络，单位接入网络（公司、学校），无线接入网络</p>
</li>
<li><p>住宅接入：Modem（调制解调器，俗称“猫”）</p>
</li>
</ul>
<p><img src="/pictures/ComNet-C1/Modem.png" alt="modem" title="modem" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ul>
<li>接入网：Digital Subscriber Line （DSL）</li>
</ul>
<p><img src="/pictures/ComNet-C1/DSL.png" alt="DSL" title="DSL" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ul>
<li>线缆网络：有线电视线缆和光纤网络</li>
</ul>
<p><img src="/pictures/ComNet-C1/%E7%BA%BF%E7%BC%86%E7%BD%91%E7%BB%9C1.png" alt="线缆网络1" title="线缆网络1" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br><img src="/pictures/ComNet-C1/%E7%BA%BF%E7%BC%86%E7%BD%91%E7%BB%9C2.png" alt="线缆网络2" title="线缆网络2" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ul>
<li>接入网：家庭网络</li>
</ul>
<p><img src="/pictures/ComNet-C1/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C.png" alt="家庭网络" title="家庭网络" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ul>
<li>企业接入网络（Ethernet）</li>
</ul>
<p><img src="/pictures/ComNet-C1/%E4%BC%81%E4%B8%9A%E6%8E%A5%E5%85%A5%E7%BD%91%E7%BB%9C.png" alt="企业接入网络" title="企业接入网络" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ul>
<li>无线接入网络：WLAN（无线LANs）和广域无线接入（4G、5G）</li>
</ul>
<p><img src="/pictures/ComNet-C1/%E6%97%A0%E7%BA%BF%E6%8E%A5%E5%85%A5%E7%BD%91%E7%BB%9C.png" alt="无线接入网络" title="无线接入网络" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="传输媒体"><a href="#传输媒体" class="headerlink" title="传输媒体"></a>传输媒体</h3><ul>
<li>传输媒体：在物理层的下面，也称为第0层，在两个节点之间传输信号，以Bit的形式进行。</li>
<li>传输媒体分为导引型媒体和非导引型媒体。导引型就是看得见摸得着的实体（光纤、电缆等），非导引型就是看不见的（电磁波等）</li>
</ul>
<p><img src="/pictures/ComNet-C1/%E4%BC%A0%E8%BE%93%E5%AA%92%E4%BD%93.png" alt="传输媒体" title="传输媒体" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br><img src="/pictures/ComNet-C1/%E4%BC%A0%E8%BE%93%E5%AA%92%E4%BD%932.png" alt="传输媒体" title="传输媒体" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br><img src="/pictures/ComNet-C1/%E4%BC%A0%E8%BE%93%E5%AA%92%E4%BD%933.png" alt="传输媒体" title="传输媒体" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="Internet结构和ISP"><a href="#Internet结构和ISP" class="headerlink" title="Internet结构和ISP"></a>Internet结构和ISP</h2><ul>
<li>互联网络结构：网络的网络</li>
<li>端系统通过ISP（Internet Service Provider，网络服务提供商）接入互联网，ISP之间通过IXP（Internet Exchange Point，互联网交换点）连接。</li>
<li>ICP：Internet Content Provider，互联网内容提供商，如百度、谷歌等。</li>
</ul>
<h3 id="ISP之间的连接"><a href="#ISP之间的连接" class="headerlink" title="ISP之间的连接"></a>ISP之间的连接</h3><ul>
<li>POP：Point of Presence，高层ISP面向客户网络的接入点，涉及费用结算。</li>
<li>IXP：Internet Exchange Point，多个对等ISP之间的连接点，不涉及费用结算。</li>
<li>对等接入：两个ISP之间的连接，不涉及费用结算。</li>
<li>ICP自己部署专属网络，同时和各级ISP连接。</li>
</ul>
<h2 id="分组延时，丢失和吞吐量"><a href="#分组延时，丢失和吞吐量" class="headerlink" title="分组延时，丢失和吞吐量"></a>分组延时，丢失和吞吐量</h2><ul>
<li>分组延时：节点处理延时，排队延时，传输延时，传播延时。</li>
<li>ICMP：Internet Control Message Protocol，网络控制数据报协议，用于网络故障诊断和报告。</li>
<li>分组丢失：①链路的队列缓冲区容量有限；②当分组到达一个满的队列时，该分组将会丢失；③丢失的分组可能会被前一个节点或源端系统重传，或根本不重传。</li>
<li>吞吐量：在源端和目标端之间传输的速率（数据量&#x2F;单位时间）。</li>
</ul>
<h2 id="协议层次和服务模型"><a href="#协议层次和服务模型" class="headerlink" title="协议层次和服务模型"></a>协议层次和服务模型</h2><ul>
<li>层次化方式实现复杂网络功能：</li>
<li>将网络复杂的功能分层功能明确的层次，每一层实现了其中一个或一组功能，功能中有其上层可以使用的功能：服务</li>
<li>本层协议实体相互交互执行本层的协议动作，目的是实现本层功能，通过接口为上层提供更好的服务</li>
<li>在实现本层协议的时候，直接利用了下层所提供的服务</li>
<li>本层的服务：借助下层服务实现的本层协议实体之间交互带来的新功能（上层可以利用的）+更下层所提供的服务</li>
</ul>
<h3 id="服务和访问点"><a href="#服务和访问点" class="headerlink" title="服务和访问点"></a>服务和访问点</h3><p><img src="/pictures/ComNet-C1/%E6%9C%8D%E5%8A%A1%E5%92%8C%E8%AE%BF%E9%97%AE%E7%82%B9.png" alt="服务和访问点" title="服务和访问点" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="服务的类型"><a href="#服务的类型" class="headerlink" title="服务的类型"></a>服务的类型</h3><p><img src="/pictures/ComNet-C1/%E9%9D%A2%E5%90%91%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%9C%8D%E5%8A%A1.png" alt="面向连接的服务" title="面向连接的服务" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br><img src="/pictures/ComNet-C1/%E6%97%A0%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%9C%8D%E5%8A%A1.png" alt="无连接的服务" title="无连接的服务" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="服务和协议"><a href="#服务和协议" class="headerlink" title="服务和协议"></a>服务和协议</h3><p><img src="/pictures/ComNet-C1/%E6%9C%8D%E5%8A%A1%E5%92%8C%E5%8D%8F%E8%AE%AE.png" alt="服务和协议" title="服务和协议" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="数据单元-DU"><a href="#数据单元-DU" class="headerlink" title="数据单元(DU)"></a>数据单元(DU)</h3><p><img src="/pictures/ComNet-C1/DU.png" alt="DU" title="DU" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/pictures/ComNet-C1/%E6%9C%8D%E5%8A%A1%E4%B8%8E%E5%8D%8F%E8%AE%AE.png" alt="服务与协议" title="服务与协议" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="Internet协议栈"><a href="#Internet协议栈" class="headerlink" title="Internet协议栈"></a>Internet协议栈</h3><ul>
<li>五层模型：应用层，运输层，网络层，链路层，物理层</li>
</ul>
<p><img src="/pictures/ComNet-C1/%E4%BA%94%E5%B1%82%E6%A8%A1%E5%9E%8B.png" alt="五层模型" title="五层模型" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ul>
<li>ISO&#x2F;OSI七层模型：应用层，表示层，会话层，传输层，网络层，链路层，物理层</li>
</ul>
<p><img src="/pictures/ComNet-C1/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B.png" alt="七层模型" title="七层模型" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="封装和解封装"><a href="#封装和解封装" class="headerlink" title="封装和解封装"></a>封装和解封装</h3><ul>
<li>封装：将数据包加上头部信息，形成数据报</li>
<li>解封装：将数据报的头部信息去掉，得到数据包</li>
</ul>
<p><img src="/pictures/ComNet-C1/%E5%B0%81%E8%A3%85%E5%92%8C%E8%A7%A3%E5%B0%81%E8%A3%85.png" alt="封装和解封装" title="封装和解封装" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/pictures/ComNet-C1/%E5%B0%81%E8%A3%85%E5%92%8C%E8%A7%A3%E5%B0%81%E8%A3%85E.png" alt="封装和解封装E" title="封装和解封装E" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>如上图所示，在源端做一个大的封装，经过switch节点，有两层的解封装和再封装；经过router节点，有三层的解封装和再封装，最后到达目的端，做最后的大的解封装。</p>
<h3 id="各协议层次的协议数据单元"><a href="#各协议层次的协议数据单元" class="headerlink" title="各协议层次的协议数据单元"></a>各协议层次的协议数据单元</h3><ul>
<li>应用层：报文(Message)</li>
<li>传输层：报文段(Segment)：TCP段，UDP数据报</li>
<li>网络层：分组(Packet)，如果无连接方式：数据报(Datagram)</li>
<li>数据链路层：帧(Frame)</li>
<li>物理层：比特&#x2F;位(Bit)</li>
</ul>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="/pictures/ComNet-C1/%E5%B0%8F%E7%BB%931.png" alt="小结1" title="小结1" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br><img src="/pictures/ComNet-C1/%E5%B0%8F%E7%BB%932.png" alt="小结2" title="小结2" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br><img src="/pictures/ComNet-C1/%E5%B0%8F%E7%BB%933.png" alt="小结3" title="小结3" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<hr>
<p>持续更新中…<br>如有错误，请及时指出～评论发邮件均可，欧内盖！</p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
        <tag>XJTLU</tag>
      </tags>
  </entry>
  <entry>
    <title>关于学习二进制时碰到的一些小细节</title>
    <url>/2024/03/06/EEE104-L2-Binary/</url>
    <content><![CDATA[<p>#EEE104</p>
<p>在学习二进制时（没想到学二进制竟然是在EEE的课上，有点难绷），在二进制的原码、补码、反码和取反操作上碰到了一些问题。<br>经过和 <a href="https://breezyb1n.github.io/">@b1n</a>、 <a href="http://chiran.top/">@suchen</a> 的讨论，疑团才算一一解开，在这里简单记录总结一下。</p>
<p>还有一点要注意的是，在英语中，原码是 true form，1’s complement 表示反码，2’s complement 表示补码。</p>
<h3 id="首先，直接划重点"><a href="#首先，直接划重点" class="headerlink" title="首先，直接划重点"></a>首先，直接划重点</h3><ul>
<li>取反是一定0变1，1变0；</li>
<li>正数的反码不是正数取反得到的；</li>
<li>负数的反码是正数取反得到的；</li>
<li>取反+1是得到负数的补码，不是原码；</li>
<li>要得到负数的原码直接将其绝对值的二进制原码前加一个符号位1就可以了。</li>
</ul>
<p>接下来，一一解释这五点：</p>
<h3 id="取反是一定0变1，1变0"><a href="#取反是一定0变1，1变0" class="headerlink" title="取反是一定0变1，1变0"></a>取反是一定0变1，1变0</h3><p> - 二进制取反，又称二进制反码运算，是指对二进制数的每一位进行取反，即0变为1，1变为0。</p>
<p>之前疑惑的点是：既然取反一定是0变1，1变0，那么为什么整数的反码和原码是一样的呢？</p>
<p><img src="/pictures/EEE104-L2-Binary/yfb.jpg" alt="原码补码反码" title="原码补码反码" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>这就要说到第二点了：</p>
<h3 id="正数的反码不是正数取反得到的"><a href="#正数的反码不是正数取反得到的" class="headerlink" title="正数的反码不是正数取反得到的"></a>正数的反码不是正数取反得到的</h3><p> - <strong>正数的原码，反码，补码均相同</strong>，正数的反码就是原码，补码与原码相同。</p>
<h3 id="负数的反码是正数取反得到的"><a href="#负数的反码是正数取反得到的" class="headerlink" title="负数的反码是正数取反得到的"></a>负数的反码是正数取反得到的</h3><p> - 负数的反码等于负数的原码符号位不变，数值位取反的二进制数，正数取反是对正数的二进制数原码的每一位进行取反，得到的就是对应负数的反码。</p>
<h3 id="取反-1是得到负数的补码，不是原码"><a href="#取反-1是得到负数的补码，不是原码" class="headerlink" title="取反+1是得到负数的补码，不是原码"></a>取反+1是得到负数的补码，不是原码</h3><p> - 我们一般说为了得到一个负数的二进制数，通常是对应正数的二进制数取反再+1 —— 这里正数的二进制数通常就是正数的原码(不过正数的原补反其实都一样)，而得到的负数的二进制数通常是其补码，而涉及到负数的计算，一般都使用负数的补码。</p>
<h3 id="要得到负数的原码直接将其绝对值的二进制原码前加一个符号位1就可以了"><a href="#要得到负数的原码直接将其绝对值的二进制原码前加一个符号位1就可以了" class="headerlink" title="要得到负数的原码直接将其绝对值的二进制原码前加一个符号位1就可以了"></a>要得到负数的原码直接将其绝对值的二进制原码前加一个符号位1就可以了</h3><p> - 上面的图表已经显示的很明白了，负数的原码其实就是正数的原码直接最高位 0 变 1 即可。但是似乎并没有太大用，因为涉及到负数计算似乎还是用补码。</p>
<ul>
<li>综上，原码通常最好理解，能快速对应其十进制的数值 —— 但是如果涉及到计算，尤其是涉及到负数的，我们通常用补码来计算。补码除了理解会困难些，似乎没有什么不好了。</li>
</ul>
<hr>
<p>如有错误，请及时指出～评论发邮件均可，欧内盖！</p>
]]></content>
      <categories>
        <category>XJTLU</category>
      </categories>
      <tags>
        <tag>EEE104</tag>
      </tags>
  </entry>
  <entry>
    <title>INT104-T2-Python</title>
    <url>/2024/03/07/INT104-T2/</url>
    <content><![CDATA[<p>#INT104 #Python</p>
<p>这次是 INT104 的第二节tutorial，<br>主要讲了一些操作符，if-else，循环和函数。<br>还是仅总结py特色的一些语法，比较简单不做详细解释。<br>(其实老师给的notebook上面都有，看那个也行)</p>
<h3 id="Arithmetic-operations-算术操作符"><a href="#Arithmetic-operations-算术操作符" class="headerlink" title="Arithmetic operations(算术操作符)"></a>Arithmetic operations(算术操作符)</h3><p><img src="/pictures/INT104-T2/ao.png" alt="ao" title="ao" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>需要注意的是，python中求次方是用 <code>**</code>，还有一个操作符：<code>//</code>，用于执行 <strong>整数除法</strong> 操作。它将两个操作数（被除数和除数）转换为整数，然后进行除法运算，并返回 <strong>商的整数部分</strong> 。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span> ** <span class="number">2</span>  <span class="comment"># 16</span></span><br><span class="line"><span class="number">7</span> // <span class="number">2</span>  <span class="comment"># 3</span></span><br></pre></td></tr></table></figure>

<h3 id="Logical-operators-逻辑运算符"><a href="#Logical-operators-逻辑运算符" class="headerlink" title="Logical operators(逻辑运算符)"></a>Logical operators(逻辑运算符)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x <span class="keyword">or</span> y  <span class="comment"># 或</span></span><br><span class="line">x <span class="keyword">and</span> y <span class="comment"># 和</span></span><br><span class="line"><span class="keyword">not</span> x   <span class="comment"># 非</span></span><br></pre></td></tr></table></figure>

<h3 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> condition1:  <span class="comment"># the condition should be bool</span></span><br><span class="line">    statement1</span><br><span class="line"><span class="keyword">elif</span> condition2:</span><br><span class="line">    statement2</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    statement3</span><br></pre></td></tr></table></figure>

<h3 id="For-loop-For-循环"><a href="#For-loop-For-循环" class="headerlink" title="For loop (For 循环)"></a>For loop (For 循环)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> itemList:</span><br><span class="line">    <span class="comment">#do something to item</span></span><br></pre></td></tr></table></figure>

<h3 id="While-loop-While-循环"><a href="#While-loop-While-循环" class="headerlink" title="While loop (While 循环)"></a>While loop (While 循环)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> n &lt; <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Executing while loop&quot;</span>)</span><br><span class="line">    n = n + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Finish while loop&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="break-continue"><a href="#break-continue" class="headerlink" title="break &amp; continue"></a>break &amp; continue</h3><ul>
<li>Break: 当代码运行到<code>break</code>时，直接终止循环。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>: </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Executing while loop&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">5</span>: </span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    n = n + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;finish while loop&quot;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>Continue: 当代码运行到<code>continue</code>时，终止本次循环，进入下一轮循环。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> num &lt; <span class="number">10</span>:</span><br><span class="line">    num = num + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> num % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(num)</span><br></pre></td></tr></table></figure>

<h3 id="Functions-函数"><a href="#Functions-函数" class="headerlink" title="Functions (函数)"></a>Functions (函数)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">functionName</span>(<span class="params">[argument1, argument2, ..., argumentN]</span>): <span class="comment"># argument is [opentional]</span></span><br><span class="line">    statements</span><br><span class="line">    ..</span><br><span class="line">    ..</span><br><span class="line">    [<span class="keyword">return</span> returnValue] <span class="comment">#[optional] if it needs return value.</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Default and Optional arguments:<br> - Default 参数，也称为默认值参数，允许函数在调用时不提供某些参数值。如果调用时没有提供这些参数值，则使用函数定义时指定的默认值。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_function</span>(<span class="params">a, b=<span class="number">10</span></span>):</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">f&quot;a=<span class="subst">&#123;a&#125;</span>, b=<span class="subst">&#123;b&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">my_function(<span class="number">1</span>)  <span class="comment"># 输出：a=1, b=10</span></span><br><span class="line">my_function(<span class="number">1</span>, <span class="number">20</span>)  <span class="comment"># 输出：a=1, b=20</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> - Optional 参数，也称为可选参数，允许函数在调用时不提供某些参数值。如果调用时没有提供这些参数值，则这些参数的值将为 None。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_function</span>(<span class="params">a: <span class="built_in">int</span>, b: <span class="type">Optional</span>[<span class="built_in">int</span>] = <span class="literal">None</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">f&quot;a=<span class="subst">&#123;a&#125;</span>, b=<span class="subst">&#123;b&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">my_function(<span class="number">1</span>)  <span class="comment"># 输出：a=1, b=None</span></span><br><span class="line">my_function(<span class="number">1</span>, <span class="number">20</span>)  <span class="comment"># 输出：a=1, b=20</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>Return multiple value:<br> - python中，一个函数可以返回多个值，作为一个元组或者一个字典。</li>
</ul>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_function</span>():</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line"></span><br><span class="line">result = my_function()</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 输出一个元组：(1, 2, 3)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_function</span>():</span><br><span class="line">  <span class="keyword">return</span> &#123;<span class="string">&quot;a&quot;</span>: <span class="number">1</span>, <span class="string">&quot;b&quot;</span>: <span class="number">2</span>, <span class="string">&quot;c&quot;</span>: <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">result = my_function()</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 输出一个字典：&#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="different-print"><a href="#different-print" class="headerlink" title="different print"></a>different print</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str1 = <span class="string">&quot;the string class has&quot;</span></span><br><span class="line">int1 = <span class="number">76</span></span><br><span class="line">str2 = <span class="string">&quot;methods!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(str1, int1, str2) <span class="comment"># , 连接的不限制数据类型</span></span><br><span class="line"><span class="built_in">print</span>(str1 + str2) <span class="comment">#这个就是把字符串拼接成一个字符串再打印，所以要求 + 连接的必须是同种数据类型的参数。</span></span><br></pre></td></tr></table></figure>

<h3 id="Placeholders-占位符-class-类"><a href="#Placeholders-占位符-class-类" class="headerlink" title="Placeholders(占位符) &amp; class(类)"></a>Placeholders(占位符) &amp; class(类)</h3><p>其实这些notebook上都有……<br>直接看老师给的notebook吧（逃</p>
<hr>
<p>如有错误，请及时指出～评论发邮件均可，欧内盖！</p>
]]></content>
      <categories>
        <category>XJTLU</category>
      </categories>
      <tags>
        <tag>INT104</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>SwiftUI中常用的Property Wrappers(属性包装器)?</title>
    <url>/2024/04/08/MacroInSwiftUI/</url>
    <content><![CDATA[<p># Swift</p>
<p>在开始之前，力荐一个学习swift&#x2F;swiftUI的网站：<a href="https://www.hackingwithswift.com/">Hacking with Swift</a></p>
<p>注意看，这个男人叫小帅，他正在通过使用<a href="https://www.apple.com.cn/macbook-pro/">MacBook Pro</a>，和<a href="https://www.hackingwithswift.com/">Hacking with Swift</a>学习Swift和SwiftUI……（划掉</p>
<p>在学到Day 60左右时，我发现SwiftUI中的「“@”打头的一些类似于Java中的Annotation的东西」越来越多，而且都很重要，除了个别几个目前学习中常用的，其他的并不是很清楚，所以在此总结一下。</p>
<p>(本文实例代码多数均来自Apple官方文档)</p>
<h2 id="属性包装器-Property-Wrapper"><a href="#属性包装器-Property-Wrapper" class="headerlink" title="属性包装器(Property Wrapper)"></a>属性包装器(Property Wrapper)</h2><p>属性包装器是 Swift 5.1 的新特性之一（详见 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0258-property-wrappers.md">SE-0258</a>），其主要作用是将通用的模版代码封装成一种简洁的表达形式，以提高编码的效率。</p>
<p>SwiftUI中内置了大量的属性包装器。熟悉它们的用法和区别，是熟练使用 SwiftUI 的必要条件之一。本部分简要总结了一下目前学到的和见到的属性包装器。后续还会有自定义属性包装器等相关的内容，但是目前水平有限，以后再说吧。（</p>
<h3 id="State"><a href="#State" class="headerlink" title="@State"></a>@State</h3><p><code>@State</code> 算是目前用过最多最核心的一个，是 SwiftUI 中最常用的属性包装器之一，用于声明一个<strong>状态变量</strong>。当状态变量的值发生变化时，SwiftUI 会自动重新渲染视图。Apple Documentation中的官方解释是：”A property wrapper type that can read and write a value managed by SwiftUI.”</p>
<p>需要注意的是，<code>@State</code> 只能修饰简单的数据类型，如 <code>Int</code>、<code>String</code>、<code>Bool</code> 、<code>Array</code>等。如果需要存储复杂的数据类型，可以使用 <code>@StateObject</code> 或 <code>@ObservedObject</code>，后文会一一再解释。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">PlayButton</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> isPlaying: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span> <span class="comment">// Create the state.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Button</span>(isPlaying <span class="operator">?</span> <span class="string">&quot;Pause&quot;</span> : <span class="string">&quot;Play&quot;</span>) &#123; <span class="comment">// Read the state.</span></span><br><span class="line">            isPlaying.toggle() <span class="comment">// Write the state.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果我们想要<code>@State</code>一个类的实例，可以将对象的类设置为<code>@Observable</code>宏：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Observable</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Library</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> name <span class="operator">=</span> <span class="string">&quot;My library of books&quot;</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> library <span class="operator">=</span> <span class="type">Library</span>() <span class="comment">//这样就可以@State一个实例了</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">LibraryView</span>(library: library)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>(在这部分代码中，可能会有一些效率上的问题，具体修改可参考<a href="https://developer.apple.com/documentation/swiftui/state/">Apple开发文档</a>)</p>
<ul>
<li>如果我们想跨视图传递一个<code>@State</code>对象，可以直接将对象引用传递给子视图：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Observable</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> title <span class="operator">=</span> <span class="string">&quot;A sample book&quot;</span></span><br><span class="line">    <span class="keyword">var</span> isAvailable <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> book <span class="operator">=</span> <span class="type">Book</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">BookView</span>(book: book)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BookView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> book: <span class="type">Book</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(book.title)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Binding"><a href="#Binding" class="headerlink" title="@Binding"></a>@Binding</h3><p><code>@Binding</code> 用于将一个属性绑定到另一个属性，以实现数据的双向绑定。在 SwiftUI 中，<code>@Binding</code> 通常与<code>@State</code>搭配使用，将父视图的状态传递给子视图，并在子视图中修改父视图的状态。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">PlayerView</span>: <span class="title class_">View</span> &#123; <span class="comment">//父视图</span></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> isPlaying: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span> <span class="comment">// Create the state here now.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">PlayButton</span>(isPlaying: <span class="variable">$isPlaying</span>) <span class="comment">// Pass a binding.</span></span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">PlayButton</span>: <span class="title class_">View</span> &#123; <span class="comment">//子视图</span></span><br><span class="line">    <span class="meta">@Binding</span> <span class="keyword">var</span> isPlaying: <span class="type">Bool</span> <span class="comment">// Play button now receives a binding.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Button</span>(isPlaying <span class="operator">?</span> <span class="string">&quot;Pause&quot;</span> : <span class="string">&quot;Play&quot;</span>) &#123;</span><br><span class="line">            isPlaying.toggle()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Bindable"><a href="#Bindable" class="headerlink" title="@Bindable"></a>@Bindable</h3><p>与<code>@Binding</code> 类似，<code>@Bindable</code> 也是用于实现数据的双向绑定。不同的是，**<code>@Bindable</code>作用于可观察(Observable)对象的可变属性(the mutable properties of observable objects)**</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Observable</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>: <span class="title class_">Identifiable</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> title <span class="operator">=</span> <span class="string">&quot;Sample Book Title&quot;</span></span><br><span class="line">    <span class="keyword">var</span> isAvailable <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BookEditView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@Bindable</span> <span class="keyword">var</span> book: <span class="type">Book</span></span><br><span class="line">    <span class="meta">@Environment</span>(\.dismiss) <span class="keyword">private</span> <span class="keyword">var</span> dismiss</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Form</span> &#123;</span><br><span class="line">            <span class="type">TextField</span>(<span class="string">&quot;Title&quot;</span>, text: <span class="variable">$book</span>.title)</span><br><span class="line"></span><br><span class="line">            <span class="type">Toggle</span>(<span class="string">&quot;Book is available&quot;</span>, isOn: <span class="variable">$book</span>.isAvailable)</span><br><span class="line"></span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Close&quot;</span>) &#123;</span><br><span class="line">                dismiss()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="StateObject"><a href="#StateObject" class="headerlink" title="@StateObject"></a>@StateObject</h3><p><code>@StateObject</code> 也是一个属性包装器，用于声明一个**可观察的对象(observable object)**。与 <code>@State</code> 不同，<code>@StateObject</code> 用于存储复杂的数据类型，如类的实例。当可观察对象的属性发生变化时，SwiftUI 会自动重新渲染视图。并且，该对象的生命周期由视图控制，当视图被销毁时，对象也会被销毁。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DataModel</span>: <span class="title class_">ObservableObject</span> &#123;</span><br><span class="line">    <span class="meta">@Published</span> <span class="keyword">var</span> name <span class="operator">=</span> <span class="string">&quot;Some Name&quot;</span></span><br><span class="line">    <span class="meta">@Published</span> <span class="keyword">var</span> isEnabled <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MyView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@StateObject</span> <span class="keyword">private</span> <span class="keyword">var</span> model <span class="operator">=</span> <span class="type">DataModel</span>() <span class="comment">// Create the state object.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(model.name) <span class="comment">// Updates when the data model changes.</span></span><br><span class="line">        <span class="type">MySubView</span>()</span><br><span class="line">            .environmentObject(model)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，这里虽然也是可观察对象，但是这里并没有<code>@Observable</code>。<code>@Observable</code>通常和<code>@State</code>配合使用，用法上文已经说过了；而<code>@StateObject</code>通常和<code>@Published</code>配合使用，<code>@Published</code>是一个属性包装器，用于声明一个可观察对象的属性，后面会再具体解释。</p>
<h3 id="ObservedObject"><a href="#ObservedObject" class="headerlink" title="@ObservedObject"></a>@ObservedObject</h3><p><code>@ObservedObject</code> 也是一个属性包装器，用于声明一个**可观察对象(observable object)**。与 <code>@StateObject</code> 不同，<code>@ObservedObject</code> 用于在视图中引用其他视图中的可观察对象。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Contact</span>: <span class="title class_">ObservableObject</span> &#123;</span><br><span class="line">    <span class="meta">@Published</span> <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="meta">@Published</span> <span class="keyword">var</span> age: <span class="type">Int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(<span class="params">name</span>: <span class="type">String</span>, <span class="params">age</span>: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.name <span class="operator">=</span> name</span><br><span class="line">        <span class="keyword">self</span>.age <span class="operator">=</span> age</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">haveBirthday</span>() -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        age <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> john <span class="operator">=</span> <span class="type">Contact</span>(name: <span class="string">&quot;John Appleseed&quot;</span>, age: <span class="number">24</span>)</span><br><span class="line">cancellable <span class="operator">=</span> john.objectWillChange</span><br><span class="line">    .sink &#123; <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">\(john.age)</span> will change&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">print</span>(john.haveBirthday())</span><br><span class="line"><span class="comment">// Prints &quot;24 will change&quot;</span></span><br><span class="line"><span class="comment">// Prints &quot;25&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>看起来<code>@StateObject</code> 和<code>@ObservedObject</code> 很是相似，那么他们二者的区别？</li>
</ul>
<p><code>@ObservedObject</code> 和 <code>@StateObject</code> 的使用是完全一样的，唯一的区别在于它们的生命周期不同。</p>
<p><code>@StateObject</code> 用于在视图内部创建一个对象，并且该对象的生命周期由视图控制，当视图被销毁时，对象也会被销毁。<code>@StateObject</code> 确保对象只会被创建一次，即使视图被多次刷新也是如此。</p>
<p>使用 <code>@StateObject</code> 的场景:<br>1.当视图需要拥有并控制一个对象的状态时。<br>2.当对象需要与视图的生命周期保持一致时。<br>3.当对象包含与视图状态相关的数据时。</p>
<p><code>@ObservedObject</code> 用于在视图中引用其他对象。与 <code>@StateObject</code> 不同，<code>@ObservedObject</code> 不会创建或控制对象的生命周期。相反，它只是允许视图订阅对象的更改。</p>
<p>使用 <code>@ObservedObject</code> 的场景:<br>1.当视图需要订阅另一个对象的更改时。<br>2.当对象由视图外部创建和管理时。<br>3.当对象的状态与视图无关时。</p>
<p>所以简单来讲，<code>@StateObject</code> 在视图内部创建并控制对象的生命周期，而<code>ObservedObject</code> 则是在视图中引用其他对象。</p>
<p>虽然多数情况下都是使用 <code>@StateObject</code>，但是理解它和 <code>@ObservedObject</code> 的区别，有助于在需要时选择合理的方法实现功能。</p>
<h3 id="Published"><a href="#Published" class="headerlink" title="@Published"></a>@Published</h3><p>上文已经提到过了，<code>@Published</code> 用于标记可观察对象的属性。当标记为 <code>@Published</code> 的属性发生更改时，它会自动通知所有观察该属性的视图，并触发视图更新。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Weather</span> &#123;</span><br><span class="line">    <span class="meta">@Published</span> <span class="keyword">var</span> temperature: <span class="type">Double</span></span><br><span class="line">    <span class="keyword">init</span>(<span class="params">temperature</span>: <span class="type">Double</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.temperature <span class="operator">=</span> temperature</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> weather <span class="operator">=</span> <span class="type">Weather</span>(temperature: <span class="number">20</span>)</span><br><span class="line">cancellable <span class="operator">=</span> weather.<span class="variable">$temperature</span></span><br><span class="line">    .sink() &#123;</span><br><span class="line">        print (<span class="string">&quot;Temperature now: <span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">weather.temperature <span class="operator">=</span> <span class="number">25</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Prints:</span></span><br><span class="line"><span class="comment">// Temperature now: 20.0</span></span><br><span class="line"><span class="comment">// Temperature now: 25.0</span></span><br></pre></td></tr></table></figure>

<ul>
<li>还有一点需要注意：@Published 实际上是 <code>Combine</code> framework 框架的 <code>Publisher</code> protocol 协议的语法糖，比如 <code>@Published var str = &quot;&quot;</code> 中的 <code>str</code> 是 <code>String</code> 类型，而 <code>$str</code> 的类型是 <code>Published&lt;String&gt;.Publisher</code>，实际上就是一个 <code>Publisher</code> 实例，系统提供的 <code>Publisher</code> 实例方法它都是可以调用的。</li>
</ul>
<p>其它的属性包装器基本是类似的，比如 <code>@Binding var value: String</code> , <code>value</code> 是 <code>String</code> 类型，而 <code>$value</code> 是 <code>Binding&lt;String&gt;</code> 类型。</p>
<ul>
<li>还有一件事……！(老爹音)：在 WWDC23 Swift 5.9 版本中，SwiftUI 不再使用 <code>Combine</code>，而是改用新的 <code>Observation</code> 框架，提供 <code>Observable</code> 协议，上文有提到并作了解释。</li>
</ul>
<h3 id="Environment"><a href="#Environment" class="headerlink" title="@Environment"></a>@Environment</h3><p>@Environment 可以在任何视图中访问系统预设的环境变量，比如是否暗黑模式、系统日历、时区等。</p>
<p>更多系统预设的环境变量请参考：<a href="https://developer.apple.com/documentation/swiftui/environmentvalues">EnvironmentValues</a>。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Environment</span>(\.colorScheme) <span class="keyword">private</span> <span class="keyword">var</span> colorScheme</span><br><span class="line"></span><br><span class="line"><span class="type">LabeledContent</span>(<span class="string">&quot;ColorScheme&quot;</span>) &#123;</span><br><span class="line">  <span class="type">Text</span>(colorScheme <span class="operator">==</span> .light <span class="operator">?</span> <span class="string">&quot;Light&quot;</span> : <span class="string">&quot;Dark&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="EnvironmentObject"><a href="#EnvironmentObject" class="headerlink" title="@EnvironmentObject"></a>@EnvironmentObject</h3><p><code>@EnvironmentObject</code> 用于在应用程序中的视图之间共享可观察对象，使其可以轻松地从视图层次结构中的任何位置访问和更新共享数据，而无需手动将其传递下来。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>: <span class="title class_">ObservableObject</span> &#123;</span><br><span class="line">    <span class="meta">@Published</span> <span class="keyword">var</span> name <span class="operator">=</span> <span class="string">&quot;Taylor Swift&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">EditView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@EnvironmentObject</span> <span class="keyword">var</span> user: <span class="type">User</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">TextField</span>(<span class="string">&quot;Name&quot;</span>, text: <span class="variable">$user</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DisplayView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@EnvironmentObject</span> <span class="keyword">var</span> user: <span class="type">User</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(user.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>@Environment</code> 和 <code>@EnvironmentObject</code> 虽然长得很像，但其实很不一样：</li>
</ul>
<p><strong>1.用途不同:</strong></p>
<p><code>@EnvironmentObject</code> : 用于在视图之间共享可观察对象。<br><code>@Environment</code> : 用于从环境中访问 SwiftUI 或应用程序提供的全局数据、实例或方法。</p>
<p><strong>2.访问类型不同:</strong><br><code>@EnvironmentObject</code> : 只能访问可观察对象。<br><code>@Environment</code> : 可以访问各种类型的数据，包括值类型、引用类型、函数等。</p>
<p><strong>3.数据来源不同:</strong><br><code>@EnvironmentObject</code> : 可观察对象由用户显式提供。<br><code>@Environment</code> : 环境数据由 SwiftUI 或应用程序提供，例如屏幕尺寸、用户界面风格等。</p>
<h3 id="用哪个？"><a href="#用哪个？" class="headerlink" title="用哪个？"></a>用哪个？</h3><p>上面说的很多，<code>@Binding</code> &amp; <code>@Bindable</code>, <code>@Observable</code>, <code>@StateObject</code> &amp; <code>@ObeservedObject</code>, <code>@EnvironmentObject</code>等，这些都和视图或结构之间的传值相关。</p>
<ul>
<li>那么该如何选择呢？</li>
</ul>
<p>（这个我自己有点迷惑……</p>
<p>但比较确定的是，<code>@Bindable</code> 和 <code>Observable</code> 是 WWDC 23 中新推出的 Swift 5.9 版本中的新的 <code>Observation</code> 框架中的内容，是新的东西，而 <code>@StateObject</code>，<code>@ObeservedObject</code> 等就是相对较为老的老必登了，并且加上 SwiftUI 最新版本开始不再使用 <code>Combine</code> 框架，最后具体用哪个取决于你要用的版本。如果想要体验最新的功能和框架，<code>@Bindable</code> 和 <code>Observable</code>肯定是最省事也是最“遥遥领先”的选择。</p>
<p>（所以，Swift是一个正在蓬勃发展的活跃的语言，一定要关注每年 Apple 的 微微的插(划掉)<strong>WWDC</strong>！一定要看！</p>
<h3 id="Codable"><a href="#Codable" class="headerlink" title="@Codable"></a>@Codable</h3><p><code>@Codable</code>，用于将 Swift 类型编码和解码为数据格式，例如 JSON 或 plist。它简化了在 Swift 本地表示和适合外部存储或通信的结构化格式之间转换数据的过程。</p>
<h3 id="Query"><a href="#Query" class="headerlink" title="@Query"></a>@Query</h3><p><code>@Query</code>，适用于 WWDC 23 公布的新框架 SwiftData，是一种使用指定标准获取模型(model)并管理这些模型的类型，以便它们与基础数据保持同步。简单来说，就是使用 SwiftData 存储数据时，使用 <code>@Query</code> 获取存储的数据，并且可以进行一些排序操作。</p>
<p>以下是我在学习过程中写过的项目代码中相关的部分：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@Environment</span>(\.modelContext) <span class="keyword">var</span> modelContext</span><br><span class="line">    <span class="meta">@Query</span>(sort: \<span class="type">ExpenseItem</span>.amount, order: .reverse) <span class="keyword">var</span> expenseItems: [<span class="type">ExpenseItem</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">AddView</span>(expenseItems: expenseItems)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">AddView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Button</span>(<span class="string">&quot;Done&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> item <span class="operator">=</span> <span class="type">ExpenseItem</span>(name: <span class="string">&quot;Chino&quot;</span>, type: <span class="string">&quot;daughter&quot;</span>, amount: <span class="number">1</span>)</span><br><span class="line">        modelContext.insert(item)</span><br><span class="line">        dismiss()</span><br><span class="line">        <span class="built_in">print</span>(amount <span class="operator">??</span> <span class="number">114514</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Model</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExpenseItem</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> id <span class="operator">=</span> <span class="type">UUID</span>()</span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> type: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> amount: <span class="type">Double</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(<span class="params">id</span>: <span class="type">UUID</span> <span class="operator">=</span> <span class="type">UUID</span>(), <span class="params">name</span>: <span class="type">String</span>, <span class="params">type</span>: <span class="type">String</span>, <span class="params">amount</span>: <span class="type">Double</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.id <span class="operator">=</span> id</span><br><span class="line">        <span class="keyword">self</span>.name <span class="operator">=</span> name</span><br><span class="line">        <span class="keyword">self</span>.type <span class="operator">=</span> type</span><br><span class="line">        <span class="keyword">self</span>.amount <span class="operator">=</span> amount</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="AppStorage"><a href="#AppStorage" class="headerlink" title="@AppStorage"></a>@AppStorage</h3><p>主要用于数据持久化，并且能让我们轻松地将少量数据存储在用户的默认设置（UserDefaults）中。此外，当这些数据变更时，相关联的视图会自动进行更新。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@AppStorage</span>(<span class="string">&quot;username&quot;</span>) <span class="keyword">var</span> username: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;Anonymous&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Welcome, <span class="subst">\(username)</span>!&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Log in&quot;</span>) &#123;</span><br><span class="line">                username <span class="operator">=</span> <span class="string">&quot;@twostraws&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="宏-Macro"><a href="#宏-Macro" class="headerlink" title="宏(Macro)"></a>宏(Macro)</h2><p>Macro宏是一个更新的东西，是WWDC23，Swift 5.9版本中引入的新特性，我掌握的部分就更少了（</p>
<p>这里只暂时列举我遇到过的Macro宏及其用途。如果想要更深的了解学习可以参考这篇<a href="https://juejin.cn/post/7249888320166903867">文章</a>。</p>
<h3 id="Observable"><a href="#Observable" class="headerlink" title="@Observable"></a>@Observable</h3><p><code>@Observable</code> 是一个Macro宏，用于声明一个可观察对象。可观察对象是一个具有可变属性的类，当属性发生变化时，SwiftUI 会自动重新渲染视图。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Observable</span> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">   <span class="keyword">var</span> name: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">   <span class="keyword">var</span> needsRepairs: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">init</span>(<span class="params">name</span>: <span class="type">String</span>, <span class="params">needsRepairs</span>: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span>) &#123;</span><br><span class="line">       <span class="keyword">self</span>.name <span class="operator">=</span> name</span><br><span class="line">       <span class="keyword">self</span>.needsRepairs <span class="operator">=</span> needsRepairs</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Model"><a href="#Model" class="headerlink" title="@Model"></a>@Model</h3><p>是一种专用于 SWiftData 框架的宏，可以将一个 Swift 类转化为一个「被SwiftData管理的一个存储模型(stored model)」。简单说就是想让一个类被SwiftData管理和存储，就加上 <code>@Model</code> 宏就好了。</p>
<p>上文中 <code>@Query</code> 部分已经出现了，这里再简单写一下用法示例：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Model</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExpenseItem</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> id <span class="operator">=</span> <span class="type">UUID</span>()</span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> type: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> amount: <span class="type">Double</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(<span class="params">id</span>: <span class="type">UUID</span> <span class="operator">=</span> <span class="type">UUID</span>(), <span class="params">name</span>: <span class="type">String</span>, <span class="params">type</span>: <span class="type">String</span>, <span class="params">amount</span>: <span class="type">Double</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.id <span class="operator">=</span> id</span><br><span class="line">        <span class="keyword">self</span>.name <span class="operator">=</span> name</span><br><span class="line">        <span class="keyword">self</span>.type <span class="operator">=</span> type</span><br><span class="line">        <span class="keyword">self</span>.amount <span class="operator">=</span> amount</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Transient"><a href="#Transient" class="headerlink" title="@Transient"></a>@Transient</h3><p>同样是适用于 SwiftData 框架的宏，作用是告诉SwiftData在管理拥有类时不要保留注释属性。</p>
<p>听起来很疑惑？我也很疑惑。让我们看看实例代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Model</span> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> score: <span class="type">Int</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transient</span> </span><br><span class="line">    <span class="keyword">var</span> levelsPlayed <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(<span class="params">name</span>: <span class="type">String</span>, <span class="params">score</span>: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.name <span class="operator">=</span> name</span><br><span class="line">        <span class="keyword">self</span>.score <span class="operator">=</span> score</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SwiftData会自动将所有 <code>@Model</code> 类中的属性保存到其数据存储中。如果您不想这样——如果有仅在程序运行时需要的临时数据——那么就可以使用 <code>@Transient</code> 宏进行标记，以便 SwiftData 将其视为短暂和一次性的属性，这样它就不会与其他数据一起保存。</p>
<ul>
<li>需要注意的是，默认情况下，SwiftData 会将计算属性视为“Transient”的，所以就不需要单独去添加这个Macro宏批注了。</li>
</ul>
<h3 id="Attribute"><a href="#Attribute" class="headerlink" title="@Attribute"></a>@Attribute</h3><p>还是一个专门适用于 SwiftData 框架的宏，可以用来给 <code>@Model</code> 类中的属性增加自定义的行为。<br>Apple Documentation中的官方解释是：”Specifies the custom behavior that SwiftData applies to the annotated property when managing the owning class.”</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Model</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RemoteImage</span> &#123;</span><br><span class="line">    <span class="meta">@Attribute</span>(.unique) <span class="keyword">var</span> sourceURL: <span class="type">URL</span></span><br><span class="line">    <span class="keyword">var</span> data: <span class="type">Data</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(<span class="params">sourceURL</span>: <span class="type">URL</span>, <span class="params">data</span>: <span class="type">Data</span> <span class="operator">=</span> <span class="type">Data</span>()) &#123;</span><br><span class="line">        <span class="keyword">self</span>.sourceURL <span class="operator">=</span> sourceURL</span><br><span class="line">        <span class="keyword">self</span>.data <span class="operator">=</span> data</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Swiftdata框架管理 Model 类存储属性的默认行为适用于大多数用例。但是，如果需要更改特定属性的持久性行为，可以使用 <code>@Attribute</code> 宏进行注释。例如上方的代码中，会可能希望通过指定属性的值在该模型的所有实例中都是唯一的，那么就可以添加 <code>@Attribute(.unique)</code> 从而避免模型数据中的冲突。</p>
<h3 id="Relationship"><a href="#Relationship" class="headerlink" title="@Relationship"></a>@Relationship</h3><p>又又又是一个只适用于 SwiftData 框架的 Macro宏，用于指定一个属性，使其成为两个 Model 类之间的联系(Relationship)。</p>
<p>如果模型类的一个或多个属性表示其所在的模型与另一个模型之间的关系，可以使用 <code>@Relationship</code> 宏注释这些属性。这能够使SwiftData在运行时强制执行这些关系——包括删除相关数据，以及将任何相关元数据写入持久存储，以便跨应用程序启动之间存在关系。</p>
<p>在以下示例中，远程图像可能属于一个分类，并且一个类别可以包含零个、一个或多个图像。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Model</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RemoteImage</span> &#123;</span><br><span class="line">    <span class="meta">@Attribute</span>(.unique) <span class="keyword">var</span> sourceURL: <span class="type">URL</span></span><br><span class="line">    <span class="meta">@Relationship</span>(inverse: \<span class="type">Category</span>.images) <span class="keyword">var</span> category: <span class="type">Category</span>?</span><br><span class="line">    <span class="keyword">var</span> data: <span class="type">Data</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(<span class="params">sourceURL</span>: <span class="type">URL</span>, <span class="params">data</span>: <span class="type">Data</span> <span class="operator">=</span> <span class="type">Data</span>()) &#123;</span><br><span class="line">        <span class="keyword">self</span>.sourceURL <span class="operator">=</span> sourceURL</span><br><span class="line">        <span class="keyword">self</span>.data <span class="operator">=</span> data</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Model</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Category</span> &#123;</span><br><span class="line">    <span class="meta">@Attribute</span>(.unique) <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="meta">@Relationship</span> <span class="keyword">var</span> images <span class="operator">=</span> [<span class="type">RemoteImage</span>]()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(<span class="params">name</span>: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.name <span class="operator">=</span> name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>如有错误，请及时指出～评论发邮件均可，欧内盖！</p>
]]></content>
      <categories>
        <category>Swift</category>
      </categories>
      <tags>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title>Python解决斐波那契数列的几个方法</title>
    <url>/2024/03/14/INT104-T3/</url>
    <content><![CDATA[<p>#INT104 #Python</p>
<p>斐波那契数列是一个非常经典的数列，它的定义是：第0项为0，第1项为1，从第2项开始，每一项都等于前两项之和。</p>
<p>但是我们正常来说是不用第0项的，是从第一项开始。</p>
<p>所以他的形式是：[1, 1, 2, 3, 5, 8, 13, 21]。</p>
<p>在 INT104 的 Tutorial 3 上，我发现老师的解法，我的解法，copilot的解法，朋友的解法全都不尽相同。这就很有意思了，所以就想写一篇博客来汇总一下。</p>
<p>在此总结4种使用Python的解法：</p>
<h3 id="1-递归"><a href="#1-递归" class="headerlink" title="1. 递归"></a>1. 递归</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fibonacci(n - <span class="number">1</span>) + fibonacci(n - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generateFibonacciList</span>(<span class="params">n</span>):</span><br><span class="line">    numList = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">        numList.append(fibonacci(i))</span><br><span class="line">    <span class="keyword">return</span> numList</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(generateFibonacciList(<span class="number">8</span>))</span><br><span class="line"><span class="comment"># [1, 1, 2, 3, 5, 8, 13, 21]</span></span><br></pre></td></tr></table></figure>

<p>首先，我们定义了一个递归函数 <code>fibonacci</code>，它接受一个参数 <code>n</code>，如果 <code>n</code> 小于等于1，就返回 <code>n</code>，否则返回 <code>fibonacci(n - 1) + fibonacci(n - 2)</code>，利用递归，让前两位数字相加，来生成后一位数。这个<code>n</code>就是指生成的数列的第n项。</p>
<p>然后我们定义了一个函数 <code>generateFibonacciList</code>，用来把函数<code>fibonacci</code>生成的数字加入到数组<code>numList</code>里，并在最后得以返回这个数组。在调用时，我们传入 <code>8</code>，就会返回 <code>[1, 1, 2, 3, 5, 8, 13, 21]</code>，一个长度为8的斐波那契数列。</p>
<h3 id="2-循环"><a href="#2-循环" class="headerlink" title="2. 循环"></a>2. 循环</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>):</span><br><span class="line">    numList = []</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(numList) &lt; n:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(numList) &lt; <span class="number">2</span>:</span><br><span class="line">            numList.append(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            numList.append(numList[-<span class="number">1</span>] + numList[-<span class="number">2</span>])  <span class="comment"># -1表示最后一个元素，-2表示倒数第二个元素</span></span><br><span class="line">    <span class="keyword">return</span> numList</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fibonacci(<span class="number">8</span>))</span><br><span class="line"><span class="comment"># [1, 1, 2, 3, 5, 8, 13, 21]</span></span><br></pre></td></tr></table></figure>

<p>这个方法理论上应该是最容易想的，相对来说也是最好写的方法 —— 使用<code>while</code>循环来生成斐波那契数列：定义一个函数 <code>fibonacci</code>，它接受一个参数 <code>n</code>，在<code>numList</code>长度不够<code>n</code>时，执行循环，而在数列前两位一定是[1, 1]，所以在这两位直接<code>numList.append(1)</code>；在大于两位后的位置，我们再使用斐波那契数列的原理 —— 这个位的数字等于前两个位的数相加。最后返回一个长度为 <code>n</code> 的斐波那契数列。在调用时，我们传入 <code>8</code>，就会返回 <code>[1, 1, 2, 3, 5, 8, 13, 21]</code>，一个长度为8的斐波那契数列。</p>
<p>值得一提的是，在Python中，<code>numList[-1]</code>表示该数列的最后一位，<code>numList[-2]</code>表示倒数第二位。</p>
<h3 id="3-for-range"><a href="#3-for-range" class="headerlink" title="3. for + range"></a>3. for + range</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fibonacci</span>(<span class="params">num</span>):</span><br><span class="line">    fib_list = [<span class="number">1</span>, <span class="number">1</span>]  <span class="comment"># initialize the list with the first two fibonacci numbers</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, num):</span><br><span class="line">        fib_list.append(fib_list[i - <span class="number">1</span>] + fib_list[i - <span class="number">2</span>])  <span class="comment"># calculate the next fibonacci number</span></span><br><span class="line">    <span class="keyword">return</span> fib_list[:num]  <span class="comment"># return the first &#x27;num&#x27; fibonacci numbers</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fibonacci(<span class="number">8</span>))</span><br><span class="line"><span class="comment"># [1, 1, 2, 3, 5, 8, 13, 21]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fibonacci(<span class="number">1</span>))</span><br><span class="line"><span class="comment"># [1]</span></span><br></pre></td></tr></table></figure>

<p>这个是我本人最喜欢的一个解法：巧妙的使用<code>range</code>。</p>
<p>首先，我们定义一个初始的斐波那契数列：<code>fib_list = [1, 1]</code>，然后在此基础上我们在后面利用<code>for</code>循环添加下一位数即可。</p>
<p>那么，你可能会有疑问：如果我 num &#x3D; 1 呢？<code>range</code>里面岂不是<code>range(2, 1)</code>了，而且数列初始值就已经有2个数字了，他怎么可能会给我<code>[1]</code>呢？</p>
<p>这就要提到Python里面的一些独特的小东西了：</p>
<ul>
<li><code>range(a, b)</code>：用于生成一个从a开始到b结束（不包括b）的整数序列。步长默认为1，即从a开始，每次加1，直到b-1，最后返回一个从a开始到b结束（不包括b）的整数序列。参数a为起始值，默认为0；b为结束值，不包含在内。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成从0到9的整数序列</span></span><br><span class="line"><span class="built_in">range</span>(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成从1到5的整数序列</span></span><br><span class="line"><span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成从2到10，步长为2的整数序列</span></span><br><span class="line"><span class="built_in">range</span>(<span class="number">2</span>, <span class="number">10</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>list[:num]</code>：这个是Python里面的切片操作，<code>list</code>是一个列表，<code>list[:num]</code>表示从列表的第一个元素开始，到第<code>num</code>个元素结束，不包括第<code>num</code>个元素。</p>
</li>
<li><p>那么有意思的来了，如果我们把<code>num</code>的值设为1，即<code>range(2, 1)</code>，会发生什么呢？</p>
</li>
</ul>
<p>- 会生成一个从 2 开始，到 1 结束（不包括 1）的整数序列。但是，由于 2 大于 1，<strong>因此这个序列是空的</strong>。空序列的长度为 0，因此<code>for</code>循环体不会执行任何代码，也就是<code>fib_list</code>仍然是<code>[1,1]</code>。</p>
<ul>
<li>那我们为什么没有返回一个<code>[1,1]</code>呢？</li>
</ul>
<p>- 因为我们在最后使用了<code>fib_list[:num]</code>，它会返回一个从列表的第一个元素开始，到第<code>num</code>个元素结束，不包括第<code>num</code>个元素。所以，当<code>num</code>为1时，它只会返回该数列的第0位，即<code>[1]</code>。</p>
<h3 id="4-生成器"><a href="#4-生成器" class="headerlink" title="4. 生成器"></a>4. 生成器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>):</span><br><span class="line">    a, b = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line">        a, b = b, a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(fibonacci(<span class="number">8</span>)))  </span><br><span class="line"><span class="comment"># [1, 1, 2, 3, 5, 8, 13, 21]</span></span><br></pre></td></tr></table></figure>

<p>这个方法就更“Python”了：我们使用了生成器<code>yield</code>。</p>
<ul>
<li><code>yield</code>是什么？</li>
</ul>
<p>- <code>yield</code>是一个类似<code>return</code>的关键字，只是这个函数返回的是一个生成器。生成器是一个特殊的迭代器，它的值是在运行时生成的。生成器的好处是它不会一次性把所有的值都生成出来，而是在需要的时候才生成，可以节省内存。</p>
<p>使用<code>yield</code>，每次迭代都让<code>a</code>和<code>b</code>相加，然后把<code>a</code>的值<code>yield</code>出来，然后再把<code>a</code>和<code>b</code>的值交换，再相加，再<code>yield</code>出来……直到<code>range(n)</code>结束。</p>
<p>同样值得一提的是，如果我们在这个方法里让 <code>n = 1</code>，我们就只会<code>yield</code>一个<code>a = 1</code>，最后<code>list(1)</code>，同样可以只得到一个<code>[1]</code>。十分的巧妙，十分的Python。</p>
<hr>
<p>如有错误，请及时指出～评论发邮件均可，欧内盖！</p>
]]></content>
      <categories>
        <category>XJTLU</category>
      </categories>
      <tags>
        <tag>INT104</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Swift 中 struct 和 class 的区别</title>
    <url>/2024/03/02/diffBetweenSC/</url>
    <content><![CDATA[<p>#Swift</p>
<p>Swift，作为一个面向对象语言，也是有 <code>class</code> 关键字的。<br>但是不同于Java，C# 等语言，它的 <code>class</code> 似乎并不是很常用（？<br>而在SwiftUI中，<code>class</code>的功能似乎被 <code>struct</code> 取代——行使和 <code>class</code> 相似的功能，但是我还是时常不清楚二者的区别。所以在此总结一下😋。<br>——部分解答参考了Google Gemini给出的回答，如有错误，请务必及时指出！欧内盖！</p>
<p>Swift 中的 <code>struct</code> 和 <code>class</code> 都是用来定义自定义数据类型的，它们之间有许多相似之处，但也有一些关键的区别。</p>
<h2 id="值类型与引用类型"><a href="#值类型与引用类型" class="headerlink" title="值类型与引用类型"></a>值类型与引用类型</h2><p>最大的区别在于 struct 是值类型，而 class 是引用类型。这意味着：</p>
<ul>
<li><strong>值类型</strong>：将一个值类型变量赋值给另一个变量时，会将该值的副本赋值给另一个变量。因此，对其中一个变量的更改不会影响另一个变量。</li>
<li><strong>引用类型</strong>：将一个引用类型变量赋值给另一个变量时，只会将该变量对对象的引用赋值给另一个变量。因此，对其中一个变量的更改会影响另一个变量。</li>
</ul>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> x: <span class="type">Int</span></span><br><span class="line">  <span class="keyword">var</span> y: <span class="type">Int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a <span class="operator">=</span> <span class="type">Point</span>(x: <span class="number">1</span>, y: <span class="number">2</span>)</span><br><span class="line"><span class="keyword">var</span> b <span class="operator">=</span> a</span><br><span class="line"></span><br><span class="line">b.x <span class="operator">=</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a.x) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">print</span>(b.x) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<p>在这个例子中，<code>Point</code> 就是一个值类型。因此，将 <code>a</code> 赋值给 <code>b</code> 时，会将 <code>a</code> 的值复制给 <code>b</code>。在这之后，如果对 <code>b.x</code> 做更改， <code>a.x</code> 的值不会受到影响。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">  <span class="keyword">var</span> age: <span class="type">Int</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">init</span>(<span class="params">name</span>: <span class="type">String</span>, <span class="params">age</span>: <span class="type">Int</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.name <span class="operator">=</span> name</span><br><span class="line">    <span class="keyword">self</span>.age <span class="operator">=</span> age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c <span class="operator">=</span> <span class="type">Person</span>(name: <span class="string">&quot;John&quot;</span>, age: <span class="number">30</span>)</span><br><span class="line"><span class="keyword">var</span> d <span class="operator">=</span> c</span><br><span class="line"></span><br><span class="line">d.age <span class="operator">=</span> <span class="number">31</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c.age) <span class="comment">// 31</span></span><br><span class="line"><span class="built_in">print</span>(d.age) <span class="comment">// 31</span></span><br></pre></td></tr></table></figure>

<p>在这个例子中，<code>Person</code> 是一个引用类型。因此，将 <code>c</code> 赋值给 <code>d</code> 时，只会将 <code>c</code> 对对象的引用赋值给 <code>d</code>。在这之后，如果对 <code>d.age</code> 的值做出更改，<code>c.age</code> 的值也会受到影响。</p>
<h3 id="其他区别"><a href="#其他区别" class="headerlink" title="其他区别"></a>其他区别</h3><ul>
<li><strong>继承</strong>：class 可以继承自另一个 class，而 struct 不能。</li>
<li><strong>初始化</strong>：struct 有默认的成员初始化器，而 class 没有。</li>
<li><strong>可变性</strong>：struct 实例默认是不可变的，而 class 实例是可变的。</li>
<li><strong>类型转换</strong>：class 实例可以进行类型转换，而 struct 实例不能。</li>
</ul>
<p><strong>选择使用 struct 还是 class</strong><br>一般来说，如果不需要继承或类型转换，并且希望使用值语义，则应使用 struct。如果需要继承或类型转换，或者需要可变实例，则应使用 class。</p>
<p>以下是一些使用 struct 和 class 的示例：</p>
<ul>
<li><strong>使用 struct 表示简单的数据值</strong>，例如点、大小或颜色。</li>
<li><strong>使用 struct 表示不可变的数据</strong>，例如日期或时间。</li>
<li><strong>使用 class 表示复杂的数据结构</strong>，例如用户或文档。</li>
<li><strong>使用 class 表示需要继承的数据结构</strong>，例如视图控制器或网络请求。</li>
</ul>
]]></content>
      <categories>
        <category>Swift</category>
      </categories>
      <tags>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World - The first post!</title>
    <url>/2024/02/20/hello-world/</url>
    <content><![CDATA[<p>#Hexo<br>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>swiftUI中生成弹窗警告的一些理解</title>
    <url>/2024/03/11/swiftWarning/</url>
    <content><![CDATA[<p># Swift</p>
<p>力荐一个学习swift&#x2F;swiftUI的网站：<a href="https://www.hackingwithswift.com/">Hacking with Swift</a><br>(注：本文章中的部分idea来自于<a href="https://www.tiny66.com/example-code/swiftui-show-alert">Tiny66</a>)</p>
<h2 id="iOS的警告弹框"><a href="#iOS的警告弹框" class="headerlink" title="iOS的警告弹框"></a>iOS的警告弹框</h2><p>在学习过程中，准确说是在Day31左右时，写的一个小app：WordScramble 中，我们需要写几个需要警告弹框的地方。然后我就发现，swiftUI中实现警告弹框的逻辑还挺有特点 —— 怎么说呢，个人感觉并不简洁…但是！还是很有逻辑的，所以在这里分享一下我的学习心得。</p>
<ul>
<li>iOS中的警告弹框，就是如下的形式：<br><img src="/pictures/swiftWarning/Warning.png" alt="warning" title="warning" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li>
</ul>
<h2 id="实现一个简单的警告弹框"><a href="#实现一个简单的警告弹框" class="headerlink" title="实现一个简单的警告弹框"></a>实现一个简单的警告弹框</h2><p>首先，我们要声明一个 <code>@State</code> 的布尔值变量 <code>showingAlert</code>，默认应为<code>false</code>，在我们想要弹出警告时，将其变为<code>true</code>。（因为我们在调用 <code>.alert(isPresented: $showingAlert)</code>时，需要布尔值来判断当前情况是否需要弹出警告。</p>
<ul>
<li>因此，最基础的实现如下：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="comment">// 1</span></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> showingAlert <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Button</span>(<span class="string">&quot;Show Alert&quot;</span>) &#123;</span><br><span class="line">            <span class="comment">// 2</span></span><br><span class="line">            showingAlert.toggle() <span class="comment">// 反转布尔值</span></span><br><span class="line">        &#125;</span><br><span class="line">        .alert(isPresented: <span class="variable">$showingAlert</span>) &#123; <span class="comment">// 3</span></span><br><span class="line">            <span class="type">Alert</span>( <span class="comment">// 4</span></span><br><span class="line">                title: <span class="type">Text</span>(<span class="string">&quot;Title&quot;</span>), <span class="comment">// 标题</span></span><br><span class="line">                message: <span class="type">Text</span>(<span class="string">&quot;Message&quot;</span>), <span class="comment">// 消息内容</span></span><br><span class="line">                dismissButton: .cancel() <span class="comment">// 取消按钮</span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>需要注意的是，在这个版本中，我们使用了Alert结构体来创建警告弹框。在iOS 15以后的版本中，我们也可以用如下的代码：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="comment">// 1</span></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> showingAlert <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Button</span>(<span class="string">&quot;Show Alert&quot;</span>) &#123;</span><br><span class="line">            <span class="comment">// 2</span></span><br><span class="line">            showingAlert.toggle()</span><br><span class="line">        &#125;</span><br><span class="line">        .alert(<span class="type">Text</span>(<span class="string">&quot;Title&quot;</span>), isPresented: <span class="variable">$showingAlert</span>) &#123; <span class="comment">// 3</span></span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Cancel&quot;</span>, role: .cancel) &#123; &#125;</span><br><span class="line">        &#125; message: &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Message&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中，注释 1 和 2 部分的代码相同，注释 3 的代码不同，区别在于在iOS 15以后，我们不再需要使用Alert结构体，直接把按钮，标题，信息传递给<code>.alert</code>即可。<br>另外需要注意的是，在我们点击alert中的按钮后，<code>showingAlert</code>会自动切换回false，不需要手动进行。方便了下次调用，同时也是为什么警告弹框会在点击按钮后消失的原因。</p>
<p>实现的效果如下：<br><img src="/pictures/swiftWarning/basic.png" alt="basic" title="basic" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="显示两个按钮"><a href="#显示两个按钮" class="headerlink" title="显示两个按钮"></a>显示两个按钮</h2><p>在理解基本的思路和原理后，如果想要实现警告弹框中有两个按钮，甚至多个按钮，就十分简单了：</p>
<ul>
<li>在旧方法中实现两个按钮：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> showingAlert <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Button</span>(<span class="string">&quot;Show Alert&quot;</span>) &#123;</span><br><span class="line">            showingAlert.toggle()</span><br><span class="line">        &#125;</span><br><span class="line">        .alert(isPresented: <span class="variable">$showingAlert</span>) &#123;</span><br><span class="line">            <span class="type">Alert</span>(</span><br><span class="line">                title: <span class="type">Text</span>(<span class="string">&quot;Title&quot;</span>),</span><br><span class="line">                message: <span class="type">Text</span>(<span class="string">&quot;Message&quot;</span>),</span><br><span class="line">                primaryButton: .default(<span class="type">Text</span>(<span class="string">&quot;Confirm&quot;</span>)), <span class="comment">// 1</span></span><br><span class="line">                secondaryButton: .cancel() <span class="comment">// 2</span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>与上面的区别就是，我们在这里使用了<code>primaryButton</code>和<code>secondaryButton</code>，用来显示两个按钮；而里面的<code>.default()</code>是<code>Alert.Button.default()</code>的缩写，<code>.cancel</code>是<code>Alert.Button.cancel()</code>的缩写。</p>
<p>此外，<code>Alert.Button</code>还有另外一种样式：<code>.destructive</code>，生成一个红色字体的按钮，常用于删除等操作时的提示。</p>
<ul>
<li>在iOS 15以后的版本中，我们则可以这么写：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> showingAlert <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Button</span>(<span class="string">&quot;Show Alert&quot;</span>) &#123;</span><br><span class="line">            showingAlert.toggle()</span><br><span class="line">        &#125;</span><br><span class="line">        .alert(<span class="type">Text</span>(<span class="string">&quot;Title&quot;</span>), isPresented: <span class="variable">$showingAlert</span>) &#123;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Cancel&quot;</span>, role: .cancel) &#123; &#125; <span class="comment">// 1</span></span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Confirm&quot;</span>) &#123; &#125; <span class="comment">// 2</span></span><br><span class="line">        &#125; message: &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Message&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样写的话，相比于一个按钮的版本，仅仅是增加了一行按钮而已，非常的简洁。</p>
<p>而如果要指定样式，则使用<code>role</code>，和旧版本一样也是三种：</p>
<ol>
<li><code>.default</code>，不需要指定role，显示蓝色文本；</li>
<li><code>.cancel</code>，role的值为.cancel，显示加粗的蓝色文本；</li>
<li><code>.destructive</code>，role的值为.destructive，显示红色文本。</li>
</ol>
<p>实现的效果如下：<br><img src="/pictures/swiftWarning/twoButton.png" alt="twoButton" title="twoButton" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ul>
<li>值得一提的是，如果使用iOS 15以后的这个版本，我们可以往其中添加任意多个按钮，不受限制。例如：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> showingAlert <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Button</span>(<span class="string">&quot;Show Alert&quot;</span>) &#123;</span><br><span class="line">            showingAlert.toggle()</span><br><span class="line">        &#125;</span><br><span class="line">        .alert(<span class="type">Text</span>(<span class="string">&quot;Title&quot;</span>), isPresented: <span class="variable">$showingAlert</span>) &#123;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Cancel&quot;</span>, role: .cancel) &#123; &#125;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;button 1&quot;</span>) &#123;&#125; </span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;button 2&quot;</span>) &#123;&#125; </span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;button 3&quot;</span>, role: .destructive) &#123;&#125;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;button 4&quot;</span>, role: .destructive) &#123;&#125; </span><br><span class="line">        &#125; message: &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Message&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现的效果如下：<br><img src="/pictures/swiftWarning/multi.png" alt="multi" title="multi" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="显示不同文案的警告弹框"><a href="#显示不同文案的警告弹框" class="headerlink" title="显示不同文案的警告弹框"></a>显示不同文案的警告弹框</h2><ul>
<li>如果页面上有不同的几个按钮，点了之后要显示不同文案的弹框，可以这样做：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//旧版本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">AlertMessage</span>: <span class="title class_">Identifiable</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">String</span> &#123;message&#125;</span><br><span class="line">    <span class="keyword">var</span> title: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> message: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="comment">// 2</span></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> alertMessage: <span class="type">AlertMessage</span>?</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="comment">// 3</span></span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Show Alert1&quot;</span>) &#123;</span><br><span class="line">                alertMessage <span class="operator">=</span> <span class="type">AlertMessage</span>(title: <span class="string">&quot;Alert 1&quot;</span>, message: <span class="string">&quot;message 1&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Show Alert2&quot;</span>) &#123;</span><br><span class="line">                alertMessage <span class="operator">=</span> <span class="type">AlertMessage</span>(title: <span class="string">&quot;Alert 2&quot;</span>, message: <span class="string">&quot;message 2&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4</span></span><br><span class="line">        .alert(item: <span class="variable">$alertMessage</span>) &#123;message <span class="keyword">in</span></span><br><span class="line">            <span class="type">Alert</span>(</span><br><span class="line">                title: <span class="type">Text</span>(message.title), <span class="comment">// 5</span></span><br><span class="line">                message: <span class="type">Text</span>(message.message),</span><br><span class="line">                primaryButton: <span class="type">Alert</span>.<span class="type">Button</span>.default(<span class="type">Text</span>(<span class="string">&quot;Confirm&quot;</span>)),</span><br><span class="line">                secondaryButton: <span class="type">Alert</span>.<span class="type">Button</span>.cancel()</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中：</p>
<ol>
<li>定一个<code>AlertMessage</code>结构体，用来表示消息，因为要使用在<code>.alert(item:content)</code>方法中，所以必须遵循Identifiable协议；</li>
<li>定义一个optional的状态变量<code>alertMessage</code>，用来存放消息，程序运行时，如果计算出此变量为<code>nil</code>，alert不显示，否则显示；</li>
<li>添加多个按钮，点击的时候将<code>alertMessage</code>设置成不同的值；</li>
<li>调用<code>.alert(item:content)</code>方法，绑定<code>alertMessage</code>；</li>
<li>显示不同的message。</li>
</ol>
<ul>
<li>在iOS 15以后的版本，我们这样写：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">AlertMessage</span>: <span class="title class_">Identifiable</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">String</span> &#123;message&#125;</span><br><span class="line">    <span class="keyword">var</span> title: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> message: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="comment">// 1</span></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> alertMessage: <span class="type">AlertMessage</span>?</span><br><span class="line">    <span class="comment">// 2</span></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> <span class="variable">$showingAlert</span> <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Show Alert1&quot;</span>) &#123;</span><br><span class="line">                alertMessage <span class="operator">=</span> <span class="type">AlertMessage</span>(title: <span class="string">&quot;Alert 1&quot;</span>, message: <span class="string">&quot;message 1&quot;</span>)</span><br><span class="line">                <span class="comment">// 3</span></span><br><span class="line">                <span class="variable">$showingAlert</span> <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Show Alert2&quot;</span>) &#123;</span><br><span class="line">                alertMessage <span class="operator">=</span> <span class="type">AlertMessage</span>(title: <span class="string">&quot;Alert 2&quot;</span>, message: <span class="string">&quot;message 2&quot;</span>)</span><br><span class="line">                <span class="variable">$showingAlert</span> <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .alert(alertMessage<span class="operator">?</span>.title <span class="operator">??</span> <span class="string">&quot;&quot;</span>,</span><br><span class="line">               isPresented: $<span class="variable">$showingAlert</span>,</span><br><span class="line">               presenting: alertMessage <span class="comment">// 4</span></span><br><span class="line">        ) &#123; message <span class="keyword">in</span></span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Cancel&quot;</span>, role: .cancel)&#123;&#125;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Confirm&quot;</span>) &#123;&#125;</span><br><span class="line">        &#125; message: &#123; message <span class="keyword">in</span></span><br><span class="line">            <span class="type">Text</span>(message.message)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>iOS15 alert还是需要绑定一个布尔值，所以我们还是定义了一个<code>showingAlert</code>，点击按钮的时候将其值设为true，用来显示alert。</p>
<p>另外定义了一个<code>alertMessage</code>变量存放消息，点击按钮是设置成不同的值。</p>
<p>调用<code>.alert(_:isPresented:presenting:actions:message)</code>方法，将<code>alertMessage</code>作为参数传入，最后在message里获取具体的消息内容。</p>
<h2 id="使用警告弹框的实例"><a href="#使用警告弹框的实例" class="headerlink" title="使用警告弹框的实例"></a>使用警告弹框的实例</h2><p>这是我在学习中的 WordScramble app中的应用实例：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> usedWords <span class="operator">=</span> [<span class="type">String</span>]()</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> rootWord <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> newWord <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> errorTitle <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> errorMessage <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> showingError <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> score <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">NavigationStack</span> &#123;</span><br><span class="line">            <span class="type">List</span> &#123;</span><br><span class="line">                <span class="type">Section</span> &#123;</span><br><span class="line">                    <span class="type">TextField</span>(<span class="string">&quot;Enter your word&quot;</span>, text: <span class="variable">$newWord</span>)</span><br><span class="line">                        .textInputAutocapitalization(.never)</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">&quot;Your score: <span class="subst">\(score)</span>&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">Section</span> &#123;</span><br><span class="line">                    <span class="type">ForEach</span>(usedWords, id: \.<span class="keyword">self</span>) &#123; word <span class="keyword">in</span></span><br><span class="line">                        <span class="type">HStack</span> &#123;</span><br><span class="line">                            <span class="type">Image</span>(systemName: <span class="string">&quot;<span class="subst">\(word.count)</span>.circle&quot;</span>)</span><br><span class="line">                            <span class="type">Text</span>(word)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            .navigationTitle(rootWord)</span><br><span class="line">            .onSubmit(addNewWord)</span><br><span class="line">            .toolbar&#123;</span><br><span class="line">                <span class="type">Button</span>(<span class="string">&quot;Start!&quot;</span>, action: startGame)</span><br><span class="line">            &#125;</span><br><span class="line">            .alert(errorTitle, isPresented: <span class="variable">$showingError</span>) &#123; &#125; message: &#123;</span><br><span class="line">                <span class="type">Text</span>(errorMessage)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">addNewWord</span>() &#123;</span><br><span class="line">        <span class="keyword">let</span> answer <span class="operator">=</span> newWord.lowercased().trimmingCharacters(in: .whitespacesAndNewlines)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">guard</span> answer.count <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">guard</span> isOriginal(word: answer) <span class="keyword">else</span> &#123;</span><br><span class="line">            wordError(title: <span class="string">&quot;Word used already&quot;</span>, message: <span class="string">&quot;Be more original!&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">guard</span> isPossible(word: answer) <span class="keyword">else</span> &#123;</span><br><span class="line">            wordError(title: <span class="string">&quot;Word not possible&quot;</span>, message: <span class="string">&quot;You can&#x27;t spell that word from &#x27;<span class="subst">\(rootWord)</span>&#x27;!&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">guard</span> isReal(word: answer) <span class="keyword">else</span> &#123;</span><br><span class="line">            wordError(title: <span class="string">&quot;Word not recognized&quot;</span>, message: <span class="string">&quot;You can&#x27;t just make them up, you know!&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">guard</span> isOK(newWord: answer) <span class="keyword">else</span> &#123;</span><br><span class="line">            wordError(title: <span class="string">&quot;Word not legal&quot;</span>, message: <span class="string">&quot;You can&#x27;t enter a word less than 3 or equal!&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        withAnimation &#123;</span><br><span class="line">            usedWords.insert(answer, at: <span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        score <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        newWord <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">startGame</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> startWordsURL <span class="operator">=</span> <span class="type">Bundle</span>.main.url(forResource: <span class="string">&quot;start&quot;</span>, withExtension: <span class="string">&quot;txt&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> startWords <span class="operator">=</span> <span class="keyword">try?</span> <span class="type">String</span>(contentsOf: startWordsURL) &#123;</span><br><span class="line">                <span class="keyword">let</span> allWords <span class="operator">=</span> startWords.components(separatedBy: <span class="string">&quot;<span class="subst">\n</span>&quot;</span>)</span><br><span class="line">                rootWord <span class="operator">=</span> allWords.randomElement() <span class="operator">??</span> <span class="string">&quot;silkworm&quot;</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">fatalError</span>(<span class="string">&quot;Could not load start.txt from bundle.&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">isOriginal</span>(<span class="params">word</span>: <span class="type">String</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="operator">!</span>usedWords.contains(word)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">isPossible</span>(<span class="params">word</span>: <span class="type">String</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> tempWord <span class="operator">=</span> rootWord</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> letter <span class="keyword">in</span> word &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> pos <span class="operator">=</span> tempWord.firstIndex(of: letter) &#123;</span><br><span class="line">                tempWord.remove(at: pos)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">isReal</span>(<span class="params">word</span>: <span class="type">String</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> checker <span class="operator">=</span> <span class="type">UITextChecker</span>()</span><br><span class="line">        <span class="keyword">let</span> range <span class="operator">=</span> <span class="type">NSRange</span>(location: <span class="number">0</span>, length: word.utf16.count)</span><br><span class="line">        <span class="keyword">let</span> misspelledRange <span class="operator">=</span> checker.rangeOfMisspelledWord(in: word, range: range, startingAt: <span class="number">0</span>, wrap: <span class="literal">false</span>, language: <span class="string">&quot;en&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> misspelledRange.location <span class="operator">==</span> <span class="type">NSNotFound</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">isOK</span>(<span class="params">newWord</span>: <span class="type">String</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> tempWord <span class="operator">=</span> rootWord</span><br><span class="line">        <span class="keyword">if</span> newWord <span class="operator">==</span> tempWord <span class="operator">||</span> newWord.count <span class="operator">&lt;</span> <span class="number">3</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">wordError</span>(<span class="params">title</span>: <span class="type">String</span>, <span class="params">message</span>: <span class="type">String</span>) &#123;</span><br><span class="line">        errorTitle <span class="operator">=</span> title</span><br><span class="line">        errorMessage <span class="operator">=</span> message</span><br><span class="line">        showingError <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#<span class="type">Preview</span> &#123;</span><br><span class="line">    <span class="type">ContentView</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在这个实例里，创建警告弹框的大致思路是：</p>
<ol>
<li>如果我想添加警告，我需要先定义一个<code>showingError</code>，默认值为false；</li>
<li>调用<code>alert (isPresented: $showingError)</code>；</li>
<li>用一个方法<code>addNewWord</code>来总结不同的要弹出警告的方法；</li>
<li>使用 <code>guard else</code> 进行检查，如果为 false，则执行代码块中的方法：添加警告的标题、消息，并设置 <code>shownError = true</code>。</li>
</ol>
<hr>
<p>如有错误，请及时指出～评论发邮件均可，欧内盖！</p>
]]></content>
      <categories>
        <category>Swift</category>
      </categories>
      <tags>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS绑定西浦邮箱保姆级指北</title>
    <url>/2024/10/15/UseXJTLUMailInMacOS/</url>
    <content><![CDATA[<p># XJTLU</p>
<p><strong>前言</strong></p>
<p>每年学校的IT部门和各大校园公众号都有推送 <em>关于新生（或者还没绑定邮箱的老生）的西浦邮箱绑定</em> 相关的问题。但是，我大致翻了翻很多推文，几乎都是聚焦于Windows、Android和iOS&#x2F;iPadOS客户端，很难找到Mac端的绑定方式。</p>
<p>（在我刚买新Mac的时候也遇到过不会绑定西浦邮箱的问题，过了好一段时间才绑定上，中间用网页端凑合了很长时间。。。</p>
<p>其实并不难，也不复杂，但是对于很多不熟悉的人还是会一头雾水，所以在这里介绍一下。</p>
<p>（其实我找到了一个学长的博客有讲：<a href="https://blog.csdn.net/weixin_30415591/article/details/116883529">博客链接</a>，但是时间比较久了，时效性可能不太强，操作其实几乎一样。这里用macOS  Sonoma再过一遍。</p>
<p><strong>正文</strong></p>
<ol>
<li>打开“系统设置&#x2F;系统偏好设置&#x2F;System Settings”：</li>
</ol>
<p><img src="/pictures/UseXJTLUMailInMacOS/1.png" alt="1" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ol>
<li><p>找到“互联网账户”：</p>
<p><img src="/pictures/UseXJTLUMailInMacOS/2.png" alt="2" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
<li><p>点击“添加账户&#x2F;Add account”：</p>
</li>
</ol>
<p><img src="/pictures/UseXJTLUMailInMacOS/3.png" alt="3" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ol>
<li><p>选择“Microsoft Exchange”：</p>
<p><img src="/pictures/UseXJTLUMailInMacOS/4.png" alt="4" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
<li><p>输入个人信息，后点击“登录&#x2F;Sign In”：</p>
<p>   <img src="/pictures/UseXJTLUMailInMacOS/5.png" alt="5" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
<li><p>点击“手动配置&#x2F;Configure Manually”：</p>
<p>   <img src="/pictures/UseXJTLUMailInMacOS/6.png" alt="6" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>   这时候如果你直接点 ”登录&#x2F;Sign In“ 也可以，后面都有弹窗要求输入密码，输入密码后点击登录即可。</p>
<p>   <img src="/pictures/UseXJTLUMailInMacOS/7.png" alt="7" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>   但是接着会报错：“Unable to verify account name or password.”：</p>
<p>   <img src="/pictures/UseXJTLUMailInMacOS/8.png" alt="8" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
</ol>
<p>在“Internal URL”和“External URL”处都填入 <u><strong>mail.xjtlu.edu.cn</strong></u>，同时记得把“用户名&#x2F;User Name”改一下：</p>
<p><img src="/pictures/UseXJTLUMailInMacOS/9.png" alt="9" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>接下来，在点击“登录&#x2F;Sign In”，不出意外会出现下图的结果，就说明登录成功了：</p>
<p><img src="/pictures/UseXJTLUMailInMacOS/10.png" alt="10" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>其中，最核心最重要的就是邮箱功能了，其他的比如日历、提醒事项、备忘录等，你可以走学校服务器去创建自己的日程等。和你的Apple设备自带的默认的iCloud服务器不一样，但是使用上是一样的（实际用下来感觉学校的日程、提醒事项同步不太好用，比较慢，还是用iCloud吧）总之看情况勾选就好，不知道的话就全选上。</p>
<p>然后，就大功告成啦！</p>
<p><img src="/pictures/UseXJTLUMailInMacOS/11.png" alt="11" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/pictures/UseXJTLUMailInMacOS/12.png" alt="12" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>你还可以把你的邮箱的显示名称修改为XJTLU等等你好认的名字（在Exchange账户的“详细&#x2F;details”里设置）：</p>
<p><img src="/pictures/UseXJTLUMailInMacOS/13.png" alt="13" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>感谢阅读！</p>
<p>如有什么疑问，欢迎通过邮箱联系：<a href="mailto:&#83;&#104;&#x75;&#111;&#x2e;&#77;&#97;&#50;&#x32;&#64;&#x73;&#116;&#x75;&#x64;&#101;&#x6e;&#x74;&#x2e;&#x78;&#106;&#116;&#x6c;&#x75;&#46;&#x65;&#100;&#x75;&#46;&#x63;&#110;">&#83;&#104;&#x75;&#111;&#x2e;&#77;&#97;&#50;&#x32;&#64;&#x73;&#116;&#x75;&#x64;&#101;&#x6e;&#x74;&#x2e;&#x78;&#106;&#116;&#x6c;&#x75;&#46;&#x65;&#100;&#x75;&#46;&#x63;&#110;</a>。</p>
]]></content>
      <categories>
        <category>XJTLU</category>
      </categories>
      <tags>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络自学笔记(Legacy)</title>
    <url>/2024/04/20/ComNet-C1-HKD/</url>
    <content><![CDATA[<p>#计算机网络 #XJTLU</p>
<p>湖科大 深入浅出计算机网络 微课课程(已烂尾，请参考<a href="https://r7y.moe/2024/10/25/ComNet-C1/">&lt;中科大课程的笔记版本&gt;</a>)</p>
<p>本篇笔记根据B站课程 <a href="https://space.bilibili.com/360996402">@湖科大教书匠</a> 的课程总结而来，供自学以及分享使用。<br><a href="https://www.bilibili.com/video/BV1NT411g7n6?p=3&vd_source=bda40cfe75d1533c45205d7bec39503b">&lt;课程链接&gt;</a></p>
<h2 id="因特网概述"><a href="#因特网概述" class="headerlink" title="因特网概述"></a>因特网概述</h2><h3 id="网络、互联网和因特网"><a href="#网络、互联网和因特网" class="headerlink" title="网络、互联网和因特网"></a>网络、互联网和因特网</h3><p>• 网络（Network）由若干结点（Node）和连接这些结点的链路（Link）组成。</p>
<p>• 多个网络还可以通过路由器互连起来，这样就构成了一个覆盖范围更大的网络，即互联网。<br>————因此，互联网也称为“网络的网络(Network of Networks)”。</p>
<p>• 因特网（Internet）是世界上最大的互连网络（用户数以亿计，互连的网络数以百万计）。<br>————连接在因特网上的计算机称为主机（host）<br><img src="/pictures/ComNet-C1/%E7%BD%91%E7%BB%9C.png" alt="网络" title="网络" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br><img src="/pictures/ComNet-C1/ivsI.png" alt="ivsI" title="ivsI" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="因特网简介"><a href="#因特网简介" class="headerlink" title="因特网简介"></a>因特网简介</h3><p>• 因特网发展的三个阶段：<br><img src="/pictures/ComNet-C1/%E4%B8%89%E4%B8%AA%E9%98%B6%E6%AE%B5.png" alt="三个阶段" title="三个阶段" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>• 因特网服务提供者：ISP（Internet Service Provider）<br>————我国的ISP就是三大运营商：移动联通电信（广电：？<br>————给他们缴纳一定费用，他们给主机一个IP地址，从而让主机能够在因特网中通信</p>
<p>• ISP的三层结构：<br><img src="/pictures/ComNet-C1/ISP%E4%B8%89%E5%B1%82%E7%BB%93%E6%9E%84.png" alt="ISP三层结构" title="ISP三层结构" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>————顺带一提，一旦某个用户能够接入到因特网，那么他也可以成为一个ISP。（购买调制解调器或路由器等设备，让其他用户和他相连。）</p>
<p>• 因特网的标准化工作：<br><img src="/pictures/ComNet-C1/%E6%A0%87%E5%87%86%E5%8C%96.png" alt="标准化" title="标准化" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>• 因特网的管理机构：<br><img src="/pictures/ComNet-C1/%E7%AE%A1%E7%90%86.png" alt="管理" title="管理" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>• 因特网的组成：<br><img src="/pictures/ComNet-C1/%E7%BB%84%E6%88%90.png" alt="组成" title="组成" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="电路交换、分组交换和报文交换"><a href="#电路交换、分组交换和报文交换" class="headerlink" title="电路交换、分组交换和报文交换"></a>电路交换、分组交换和报文交换</h2><h3 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h3><p>电路交换分为三个步骤：</p>
<ul>
<li><strong>建立连接</strong>：分配通信资源</li>
<li><strong>通话</strong>：一直占用通信资源</li>
<li><strong>释放连接</strong>：归还通信资源</li>
</ul>
<p>例子：旧时的电话通信：<br><img src="/pictures/ComNet-C1/%E7%94%B5%E8%AF%9D%E9%80%9A%E4%BF%A1.png" alt="电话通信" title="电话通信" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ul>
<li><strong>计算机之间的数据传送是突发式</strong>的，当<strong>使用电路交换</strong>来传送计算机数据时，其<strong>线路的传输效率一般都会很低</strong>，线路上真正用来传送数据的时间往往不到10%甚至1%。因此，计算机网络通常采用<strong>分组交换</strong>。</li>
</ul>
<h3 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h3><ul>
<li><p>通常，我们把表示消息的整块数据称为一个<strong>报文</strong><br>————而较长的报文不适宜直接传输（对交换节点的缓存容量有很大的需求，在错误处理方面也会比较低效），所以会划分成若干个较小的等长数据段，同时为其添加<strong>首部</strong>：<br><img src="/pictures/ComNet-C1/%E9%A6%96%E9%83%A8.png" alt="首部" title="首部" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
<li><p>首部的作用：最重要的是包含了<strong>分组的目的地址</strong>。</p>
</li>
<li><p>分组可以途径不同的路径最后到达目的地址。</p>
</li>
</ul>
<p><img src="/pictures/ComNet-C1/%E5%88%86%E7%BB%84%E4%BA%A4%E6%8D%A2.png" alt="分组交换" title="分组交换" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><strong>分组交换的优点</strong>：</p>
<ul>
<li>没有建立连接和释放连接的过程；</li>
<li>分组传输过程中逐段占用通信链路，有较高的通信线路利用率；</li>
<li>交换节点可以为每一个分组独立选择转发路由，使得网络有很好的生存性。</li>
</ul>
<p><strong>分组交换的缺点</strong>：</p>
<ul>
<li>分组首部带来了额外的传输开销；</li>
<li>交换节点存储转发分组会造成一定的时延；</li>
<li>无法确保通信时端到端通信资源全部可用，在通信量较大时可能造成网络拥塞。</li>
</ul>
<h3 id="报文交换"><a href="#报文交换" class="headerlink" title="报文交换"></a>报文交换</h3><ul>
<li>报文交换是分组交换的前身。</li>
<li>在报文交换中，<strong>报文被整个地发送</strong>，而不是拆开成若干个分组进行发送。</li>
<li>交换节点将报文<strong>整体接收完成后</strong>才能查找转发表，将整个报文转发到下一个节点。</li>
<li>因此，报文交换比分组交换带来的转发时延要长很多，需要交换节点具有的缓存空间也大很多。</li>
</ul>
<h3 id="三种交换方式的对比"><a href="#三种交换方式的对比" class="headerlink" title="三种交换方式的对比"></a>三种交换方式的对比</h3><p><img src="/pictures/ComNet-C1/%E5%AF%B9%E6%AF%94.png" alt="对比" title="对比" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ul>
<li><p>若要传送大量的数据，并且数据传送时间远大于建立连接的时间，则使用电路交换可以有较高的传输效率。然而<strong>计算机的数据传送</strong>往往是<strong>突发式</strong>的，<strong>采用电路交换</strong>时通信<strong>线路的利用率会很低</strong>。</p>
</li>
<li><p>报文交换和分组交换都<strong>不需要建立连接</strong>（即预先分配通信资源），在<strong>传送计算机的突发数据</strong>时可以<strong>提高通信线路的利用率</strong>。</p>
</li>
<li><p>将报文构造成若干个更小的分组进行<strong>分组交换</strong>，比将整个报文进行报文交换的<strong>时延要小</strong>，并且还可以<strong>避免太长的报文长时间占用链路</strong>，<strong>有利于差错控制</strong>，同时具有更好的灵活性。</p>
</li>
</ul>
<h2 id="计算机网络的定义"><a href="#计算机网络的定义" class="headerlink" title="计算机网络的定义"></a>计算机网络的定义</h2><ul>
<li>计算机网络早期的简单定义：是<strong>互联的</strong>，<strong>自治的计算机集合</strong>。</li>
</ul>
<p><img src="/pictures/ComNet-C1/%E4%BA%92%E8%BF%9E.png" alt="互连" title="互连" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ul>
<li>现阶段一个较好的定义：计算机网络主要是由一些通用的，可编程的硬件互连而成的，而这些硬件并非专门用来实现某一特定目的（例如，传送数据或视频信号）。</li>
</ul>
<hr>
<p>持续更新中…<br>如有错误，请及时指出～评论发邮件均可，欧内盖！</p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
        <tag>XJTLU</tag>
      </tags>
  </entry>
  <entry>
    <title>计网Chapter2-应用层</title>
    <url>/2024/11/26/ComNet-C2/</url>
    <content><![CDATA[<p>#计算机网络 #XJTLU</p>
<p>中科大郑烇、杨坚《计算机网络（自顶向下方法 第7版，James F.Kurose，Keith W.Ross）》课程</p>
<p>计算机网络系列笔记根据B站课程 <a href="https://space.bilibili.com/410739029">@中科大-郑烇老师</a> 的课程总结而来，供自学以及分享使用。<br><a href="https://www.bilibili.com/video/BV1JV411t7ow?spm_id_from=333.788.videopod.episodes&vd_source=bda40cfe75d1533c45205d7bec39503b">&lt;课程链接&gt;</a></p>
<p>第二章 应用层</p>
<h2 id="应用层协议原理"><a href="#应用层协议原理" class="headerlink" title="应用层协议原理"></a>应用层协议原理</h2><h3 id="网络应用的体系结构"><a href="#网络应用的体系结构" class="headerlink" title="网络应用的体系结构"></a>网络应用的体系结构</h3><p>可能的应用架构：</p>
<ul>
<li>客户-服务器模式（C&#x2F;S，client&#x2F;server）</li>
<li>对等模式（P2P，peer-to-peer）</li>
<li>混合模式</li>
</ul>
<p><img src="/pictures/ComNet-C2/CS%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.png" alt="CS体系结构" title="CS体系结构" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ul>
<li>CS模式的缺点：可扩展性较差，服务器可能成为性能瓶颈</li>
</ul>
<p><img src="/pictures/ComNet-C2/%E5%AF%B9%E7%AD%89%E4%BD%93%E6%9E%B6%E6%9E%84.png" alt="对等体架构" title="对等体架构" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ul>
<li>P2P模式的缺点：难以管理</li>
</ul>
<p><img src="/pictures/ComNet-C2/%E6%B7%B7%E5%90%88%E4%BD%93%E6%A8%A1%E5%BC%8F.png" alt="混合体模式" title="混合体模式" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h3><ul>
<li><p>进程：运行在不同主机上的应用程序</p>
<ul>
<li>客户端进程：发起通信的进程，是主动的进程</li>
<li>服务器进程：等待连接的进程，是被动的进程</li>
<li>即便是P2P模式，也有客户端和服务器之分。</li>
</ul>
</li>
<li><p>在同一个主机内，使用进程间通信机制通信（操作系统）</p>
</li>
<li><p>不同主机，通过交换报文(Message)进行通信。</p>
<ul>
<li>使用OS提供的通信服务</li>
<li>按照应用协议交换报文（借助传输层提供的服务）</li>
</ul>
</li>
</ul>
<h3 id="分布式进程通信"><a href="#分布式进程通信" class="headerlink" title="分布式进程通信"></a>分布式进程通信</h3><h4 id="对进程进行编址（Adressing）"><a href="#对进程进行编址（Adressing）" class="headerlink" title="对进程进行编址（Adressing）"></a>对进程进行编址（Adressing）</h4><p>进程为了接收报文，必须有一个标识，即：SAP（Socket Address Port）。SAP由IP地址和端口号组成。使用唯一的32位IP地址表示一个主机，使用16位端口号表示一个进程。本质上，一对主机进程之间的通信由两个端节点构成，<strong>一个端节点就用IP+Port来标识</strong>。</p>
<p>一些知名端口号：<br>HTTP TCP：80；  Mail TCP：25</p>
<h4 id="TCP上的套接字（TCP-Socket）"><a href="#TCP上的套接字（TCP-Socket）" class="headerlink" title="TCP上的套接字（TCP Socket）"></a>TCP上的套接字（TCP Socket）</h4><ul>
<li>TCP四元组：本地IP、本地Port、目的IP、目的Port</li>
</ul>
<p>实际上，建立一个Socket连接后，操作系统就会返回一个“整数”，（Socket描述符、句柄），用于标识这个连接。之后，就可以通过这个描述符来进行通信。<br>Socket本质上是一个连接的本地标识，<strong>一个会话关系</strong>，是传输层自己维护的一个映射关系（源IP源Port-目的IP目的Port）。<br>操作Socket的“整数”的“值”，就是操作这个会话关系，简单易于管理。</p>
<p>操作系统往往要维护一个这样的TCP Socket表，用于管理所有的TCP连接：<br><img src="/pictures/ComNet-C2/socket%E8%A1%A8.png" alt="TCP Socket表" title="TCP Socket表" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h4 id="UDP上的套接字（UDP-Socket）"><a href="#UDP上的套接字（UDP-Socket）" class="headerlink" title="UDP上的套接字（UDP Socket）"></a>UDP上的套接字（UDP Socket）</h4><ul>
<li>UDP二元组：本地IP、本地Port</li>
</ul>
<p>UDP Socket建立一个UDP二元组，代表本地IP和本地端口，是一个本地意义上的标识，代表的是一个会话关系中的<strong>一个端节点</strong>。因为UDP是无连接服务，不指定目的IP和端口。<br>UDP套接字指定了应用所在的一个端节点（end point），在发送数据报时，采用创建好的本地套接字（标示ID），就不必在发送每个报文中指明自己所采用的IP和Port了。<br>但是在发送报文时，必须要制定对方的IP和UDP Port（另一个端节点）。</p>
<p>操作系统维护一个UDP Socket表，用于管理所有的UDP连接：<br><img src="/pictures/ComNet-C2/udpSocket%E8%A1%A8.png" alt="UDP Socket表" title="UDP Socket表" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="应用层协议"><a href="#应用层协议" class="headerlink" title="应用层协议"></a>应用层协议</h3><ul>
<li>协议是对等层实体应遵循的规则集合。</li>
<li>应用层协议定义了：运行在不同端系统上的应用进程如何相互交换报文。报文包括请求和应答报文。</li>
<li>公开协议：由RFC（Request for Comments）定义规范并发布，允许互操作，如<strong>HTTP、SMTP、FTP</strong>等。</li>
<li>私有协议：一些不公开的内部协议，如Skype等。</li>
</ul>
<h2 id="Web与HTTP"><a href="#Web与HTTP" class="headerlink" title="Web与HTTP"></a>Web与HTTP</h2><h3 id="URL格式"><a href="#URL格式" class="headerlink" title="URL格式"></a>URL格式</h3><ul>
<li>URL（Uniform Resource Locator）：统一资源定位符<ul>
<li>URL格式：<code>&lt;scheme&gt;://&lt;host&gt;:&lt;port&gt;/&lt;path&gt;</code></li>
<li>scheme：协议名，如http、https、ftp等</li>
<li>host：主机名或IP地址</li>
<li>port：端口号，可选</li>
<li>path：资源路径</li>
</ul>
</li>
</ul>
<p><img src="/pictures/ComNet-C2/url%E6%A0%BC%E5%BC%8F.png" alt="URL格式" title="URL格式" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><ul>
<li><p>HTTP（HyperText Transfer Protocol）：超文本传输协议</p>
</li>
<li><p>HTTP使用TCP作为传输层协议：</p>
<ul>
<li>客户端发起一个与服务器的TCP连接（建立套接字），使用端口80；</li>
<li>服务器接受客户端的TCP连接；</li>
<li>在浏览器（HTTP客户端）与Web服务器（HTTP服务器server）交换HTTP报文（应用层协议报文）；</li>
<li>TCP连接关闭。</li>
</ul>
</li>
<li><p>HTTP是无状态的，服务器不维护客户端的状态和任何信息。这样的服务器也称为无状态服务器。</p>
</li>
</ul>
<h4 id="HTTP连接"><a href="#HTTP连接" class="headerlink" title="HTTP连接"></a>HTTP连接</h4><ul>
<li><p>非持久HTTP：</p>
<ul>
<li>最多只有一个对象在TCP连接上发送；</li>
<li>下载多个对象需要多个TCP连接；</li>
<li>HTTP&#x2F;1.0使用非持久连接。</li>
</ul>
</li>
<li><p>持久HTTP：</p>
<ul>
<li>多个对象可以在一个TCP连接上传输；</li>
<li>HTTP&#x2F;1.1默认使用持久连接。</li>
</ul>
</li>
</ul>
<h4 id="HTTP请求报文"><a href="#HTTP请求报文" class="headerlink" title="HTTP请求报文"></a>HTTP请求报文</h4><ul>
<li>两种类型：请求和响应</li>
<li>HTTP请求报文：</li>
</ul>
<p><img src="/pictures/ComNet-C2/HTTP%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87.png" alt="HTTP请求报文" title="HTTP请求报文" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h4 id="HTTP相应状态码"><a href="#HTTP相应状态码" class="headerlink" title="HTTP相应状态码"></a>HTTP相应状态码</h4><ul>
<li>200: OK</li>
<li>301: Moved Permanently</li>
<li>400: Bad Request</li>
<li>404: Not Found</li>
<li>505: HTTP Version Not Supported</li>
</ul>
<p><img src="/pictures/ComNet-C2/HTTP%E5%93%8D%E5%BA%94%E7%8A%B6%E6%80%81%E7%A0%81.png" alt="HTTP响应状态码" title="HTTP响应状态码" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h4 id="维护用户-服务器状态：Cookie"><a href="#维护用户-服务器状态：Cookie" class="headerlink" title="维护用户-服务器状态：Cookie"></a>维护用户-服务器状态：Cookie</h4><ul>
<li>Cookie：服务器发送给客户端的小文件，存储在客户端的文件中，用于维护用户-服务器状态；</li>
<li>大部分主要的门户网站使用Cookies；</li>
<li>4个组成部分:<ul>
<li>在HTTP相应报文中有一个Cookie的首部行；</li>
<li>在HTTP请求报文中有一个Cookie的首部行；</li>
<li>在用户端系统中保留一个Cookie文件，由用户的浏览器管理；</li>
<li>在Web站点有一个后端数据库。</li>
</ul>
</li>
</ul>
<p><img src="/pictures/ComNet-C2/Cookie.png" alt="Cookie" title="Cookie" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>Cookies与隐私：</p>
<ul>
<li>Cookies允许站点知道许多关于用户的信息；</li>
<li>可能会将他所知道的资料信息卖给第三方；</li>
<li>使用重定向和Cookie的搜索引擎，还能知道用户更多的信息；<ul>
<li>如通过某个用户在大量站点上的行为，了解其个人浏览方式的大致模式。</li>
</ul>
</li>
<li>广告公司从站点获得信息等。</li>
</ul>
<h4 id="Web缓存（Cache）"><a href="#Web缓存（Cache）" class="headerlink" title="Web缓存（Cache）"></a>Web缓存（Cache）</h4><hr>
<p>持续更新中…<br>如有错误，请及时指出～评论发邮件均可，欧内盖！</p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
        <tag>XJTLU</tag>
      </tags>
  </entry>
</search>
